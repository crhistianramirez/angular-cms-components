{
    "pipes": [
        {
            "name": "SafeHtmlPipe",
            "id": "pipe-SafeHtmlPipe-53c013c17b9fd06a60b2ff89daba38ff",
            "file": "projects/lib/src/shared/pipes/safe-html.pipe.ts",
            "type": "pipe",
            "description": "<p>By default angular sanitizes html and strips out things like\nstyles which we want to keep because it doesnt know if it can be trusted\nhowever we know this html is from a trusted source</p>\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "html",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "html",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safeHtml",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * By default angular sanitizes html and strips out things like\n * styles which we want to keep because it doesnt know if it can be trusted\n * however we know this html is from a trusted source\n */\n@Pipe({\n  name: 'safeHtml'\n})\nexport class SafeHtmlPipe implements PipeTransform {\n\n  constructor(private sanitizer: DomSanitizer) { }\n\n  transform(html) {\n    return this.sanitizer.bypassSecurityTrustHtml(html);\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Area",
            "id": "interface-Area-83f11720ed431a7180bd4b5ab4f1ff7a",
            "file": "projects/lib/src/admin/models/area.interface.ts",
            "type": "interface",
            "sourceCode": "export interface Area {\r\n    height: number;\r\n    width: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "height",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "width",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CarouselSlide",
            "id": "interface-CarouselSlide-568a7e92d1f76beae5e683d7300f536c",
            "file": "projects/lib/src/admin/models/carousel-slide.interface.ts",
            "type": "interface",
            "sourceCode": "export interface CarouselSlide {\r\n    ID: string;\r\n    ImageUrl: string;\r\n    ImageTitle: string;\r\n    Heading?: string;\r\n    Subheading?: string;\r\n    ActionText?: string;\r\n    ActionUrl?: string;\r\n}",
            "properties": [
                {
                    "name": "ActionText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "ActionUrl",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "Heading",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "ID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "ImageTitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "ImageUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "Subheading",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ContentDoc",
            "id": "interface-ContentDoc-cdb3cdb1221922b285143856f68aab37",
            "file": "projects/lib/src/admin/models/content-doc.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ContentDoc {\r\n    ComponentName: string;\r\n}",
            "properties": [
                {
                    "name": "ComponentName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DeviceDimensions",
            "id": "interface-DeviceDimensions-5f2f2722ee246ea7747b9b0227457ba0",
            "file": "projects/lib/src/admin/models/device-dimensions.interface.ts",
            "type": "interface",
            "sourceCode": "import { Area } from './area.interface';\r\n\r\nexport interface DeviceDimensions {\r\n    phone: Area;\r\n    tablet: Area;\r\n    desktop: Area;\r\n  }\r\n",
            "properties": [
                {
                    "name": "desktop",
                    "type": "Area",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "phone",
                    "type": "Area",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "tablet",
                    "type": "Area",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PageContentDoc",
            "id": "interface-PageContentDoc-0e362880c09f93481ade53bff5adbceb",
            "file": "projects/lib/src/admin/models/page-content-doc.interface.ts",
            "type": "interface",
            "sourceCode": "import { JDocument } from '@ordercloud/headstart-sdk';\r\n\r\nexport interface PageContentDoc {\r\n  Url: string;\r\n  SiteUrl: string;\r\n  Title: string;\r\n  Description: string;\r\n  MetaImageUrl: string;\r\n  DateCreated: string;\r\n  Author: string;\r\n  DateLastUpdated: string;\r\n  LastUpdatedBy: string;\r\n  Active: boolean;\r\n  Content: string;\r\n  HeaderEmbeds?: string;\r\n  FooterEmbeds?: string;\r\n  NavigationTitle?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "Active",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "Author",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "Content",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "DateCreated",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "DateLastUpdated",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "Description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "FooterEmbeds",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "HeaderEmbeds",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "LastUpdatedBy",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "MetaImageUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "NavigationTitle",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "SiteUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "Title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "Url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "WidgetService",
            "id": "injectable-WidgetService-822d15399a1533b8449a25ccf2db8544",
            "file": "projects/lib/src/shared/services/widget.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "applyDateRules",
                    "args": [
                        {
                            "name": "html",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "html",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNowDate",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import * as $ from 'jquery';\nimport { Injectable } from '@angular/core';\nimport {\n  OC_TINYMCE_WIDGET_ATTRIBUTE, OC_TINYMCE_SECTION_WIDGET_ID, OC_TINYMCE_START_DATE_ATTRIBUTE,\n  OC_TINYMCE_END_DATE_ATTRIBUTE\n} from '../constants/widget.constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WidgetService {\n\n  constructor() { }\n\n  public applyDateRules(html: string): string {\n    // add wrapper to the html to search on since find looks at children of that element\n    const element = $(`<div>${html}</div>`);\n    const sections = $(element).find(`[${OC_TINYMCE_WIDGET_ATTRIBUTE}='${OC_TINYMCE_SECTION_WIDGET_ID}']`);\n\n    // determine which sections are invalid\n    const now = this.getNowDate();\n    const invalidSections = sections.filter((index, section) => {\n      const startDate = section.attributes.getNamedItem(OC_TINYMCE_START_DATE_ATTRIBUTE)?.value;\n      const endDate = section.attributes.getNamedItem(OC_TINYMCE_END_DATE_ATTRIBUTE)?.value;\n\n      const tooEarly = startDate && startDate > now;\n      const tooLate = endDate && endDate < now;\n\n      return tooEarly || tooLate;\n    });\n\n    // remove any invalid sections\n    invalidSections.each((index, section) => {\n      section.remove();\n    });\n\n    // return string html\n    return element.html();\n  }\n\n  private getNowDate(): string {\n    const today = new Date();\n    const dd = String(today.getDate()).padStart(2, '0');\n    const mm = String(today.getMonth() + 1).padStart(2, '0'); // January is 0!\n    const yyyy = today.getFullYear();\n\n    return `${yyyy}-${mm}-${dd}`;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [
        {
            "name": "DragAndDropDirective",
            "id": "directive-DragAndDropDirective-61c60cc59ef9391f2d5ad800d2910c5f",
            "file": "projects/lib/src/admin/components/directives/drag-and-drop/drag-and-drop.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\r\n    Directive,\r\n    Output,\r\n    EventEmitter,\r\n    HostBinding,\r\n    HostListener\r\n  } from '@angular/core';\r\n  \r\n  @Directive({\r\n    selector: '[cmsDragAndDrop]'\r\n  })\r\n  export class DragAndDropDirective {\r\n    @HostBinding('class.fileover') fileOver: boolean;\r\n    @Output() fileDropped = new EventEmitter<any>();\r\n  \r\n    // Dragover listener\r\n    @HostListener('dragover', ['$event']) onDragOver(evt) {\r\n      evt.preventDefault();\r\n      evt.stopPropagation();\r\n      this.fileOver = true;\r\n    }\r\n  \r\n    // Dragleave listener\r\n    @HostListener('dragleave', ['$event']) public onDragLeave(evt) {\r\n      evt.preventDefault();\r\n      evt.stopPropagation();\r\n      this.fileOver = false;\r\n    }\r\n  \r\n    // Drop listener\r\n    @HostListener('drop', ['$event']) public ondrop(evt) {\r\n      evt.preventDefault();\r\n      evt.stopPropagation();\r\n      this.fileOver = false;\r\n      let files = evt.dataTransfer.files;\r\n      if (files.length > 0) {\r\n        this.fileDropped.emit(files[0]);\r\n      }\r\n    }\r\n  \r\n  }\r\n  ",
            "selector": "[cmsDragAndDrop]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "fileDropped",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [
                {
                    "name": "class.fileover",
                    "line": 13,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "evt",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 24
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "evt",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 17
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "evt",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 31
                }
            ],
            "propertiesClass": [],
            "methodsClass": []
        }
    ],
    "components": [
        {
            "name": "AssetListComponent",
            "id": "component-AssetListComponent-750bac221b8da1b6988cf6865d29e7a9",
            "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-asset-list",
            "styleUrls": [
                "./asset-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./asset-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "parentResourceID",
                    "defaultValue": "null",
                    "line": 39,
                    "type": "string"
                },
                {
                    "name": "resourceID",
                    "line": 38,
                    "type": "string"
                },
                {
                    "name": "resourceType",
                    "line": 37,
                    "type": "ResourceType"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "assets",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "assetTypes",
                    "defaultValue": "[\r\n    ASSET_TYPE_IMAGE,\r\n    ASSET_TYPE_THEME,\r\n    ASSET_TYPE_ATTACHMENT,\r\n    ASSET_TYPE_STRUCTURED,\r\n  ]",
                    "type": "AssetType[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "modalReference",
                    "type": "NgbModalRef",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "selectedTab",
                    "defaultValue": "ASSET_TYPE_IMAGE",
                    "type": "AssetType",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "handleSearch",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                },
                {
                    "name": "handleUploadAssetModal",
                    "args": [
                        {
                            "name": "modalRef",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "modalRef",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listAssets",
                    "args": [
                        {
                            "name": "assetType",
                            "type": "AssetType"
                        },
                        {
                            "name": "searchTerm",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "assetType",
                            "type": "AssetType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listAssetsPerResource",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<RequiredDeep<Asset[]>>",
                    "typeParameters": [],
                    "line": 89,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onChangeTab",
                    "args": [
                        {
                            "name": "event",
                            "type": "NgbNavChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "NgbNavChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport {\r\n  HeadStartSDK,\r\n  ListArgs,\r\n  Asset,\r\n} from '@ordercloud/headstart-sdk';\r\nimport {\r\n  NgbModal,\r\n  NgbModalRef,\r\n  NgbNavChangeEvent,\r\n} from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { ResourceType } from '../../../shared/models/resource-type.interface';\r\nimport { RequiredDeep } from '@ordercloud/headstart-sdk/dist/models/RequiredDeep';\r\n\r\nconst ASSET_TYPE_IMAGE = 'Image';\r\ntype ASSET_TYPE_IMAGE = typeof ASSET_TYPE_IMAGE;\r\nconst ASSET_TYPE_THEME = 'Theme';\r\ntype ASSET_TYPE_THEME = typeof ASSET_TYPE_THEME;\r\nconst ASSET_TYPE_ATTACHMENT = 'Attachment';\r\ntype ASSET_TYPE_ATTACHMENT = typeof ASSET_TYPE_ATTACHMENT;\r\nconst ASSET_TYPE_STRUCTURED = 'Structured';\r\ntype ASSET_TYPE_STRUCTURED = typeof ASSET_TYPE_STRUCTURED;\r\n\r\ntype AssetType =\r\n  | ASSET_TYPE_IMAGE\r\n  | ASSET_TYPE_THEME\r\n  | ASSET_TYPE_ATTACHMENT\r\n  | ASSET_TYPE_STRUCTURED;\r\n\r\n@Component({\r\n  selector: 'cms-asset-list',\r\n  templateUrl: './asset-list.component.html',\r\n  styleUrls: ['./asset-list.component.scss'],\r\n})\r\nexport class AssetListComponent implements OnInit {\r\n  @Input() resourceType?: ResourceType;\r\n  @Input() resourceID?: string;\r\n  @Input() parentResourceID?: string = null;\r\n  assets: any;\r\n  modalReference: NgbModalRef;\r\n  loading = true;\r\n  assetTypes: AssetType[] = [\r\n    ASSET_TYPE_IMAGE,\r\n    ASSET_TYPE_THEME,\r\n    ASSET_TYPE_ATTACHMENT,\r\n    ASSET_TYPE_STRUCTURED,\r\n  ];\r\n  selectedTab: AssetType = ASSET_TYPE_IMAGE;\r\n\r\n  constructor(\r\n    private spinner: NgxSpinnerService,\r\n    private modalService: NgbModal\r\n  ) {}\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    if (this.resourceID && this.resourceType) {\r\n      this.assets = await this.listAssetsPerResource()\r\n      .catch((ex) => ex)\r\n      .finally(() => {\r\n        this.loading = false;\r\n        this.spinner.hide();\r\n      })\r\n    } else {\r\n      this.listAssets(this.assetTypes[0], null);\r\n    }\r\n  }\r\n\r\n  listAssets(assetType: AssetType, searchTerm: string) {\r\n    this.spinner.show();\r\n    let options: ListArgs<Asset> = {\r\n      filters: { Type: assetType },\r\n    };\r\n    if (searchTerm) {\r\n      options = { ...options, search: searchTerm, searchOn: ['Title'] };\r\n    }\r\n    this.loading = true;\r\n    this.spinner.show();\r\n    return HeadStartSDK.Assets.List(options)\r\n      .then((assets) => {\r\n        this.assets = assets.Items;\r\n      })\r\n      .finally(() => {\r\n        this.loading = false;\r\n        this.spinner.hide();\r\n      });\r\n  }\r\n\r\n  async listAssetsPerResource(): Promise<RequiredDeep<Asset[]>> {\r\n    // TODO: remove 'as any' when ListDocuments returns correct type, currently it returns 'void' which is wrong\r\n    return (await HeadStartSDK.Assets.ListAssets(\r\n      this.resourceID,\r\n      this.parentResourceID,\r\n      this.resourceType\r\n    )) as any;\r\n  }\r\n\r\n  handleUploadAssetModal(modalRef) {\r\n    this.modalReference = this.modalService.open(modalRef, { size: 'lg' });\r\n  }\r\n\r\n  handleSubmit() {\r\n    this.modalReference.close();\r\n    this.listAssets(this.selectedTab, null);\r\n  }\r\n\r\n  handleSearch($event) {\r\n    this.listAssets(this.selectedTab, $event);\r\n  }\r\n\r\n  onChangeTab(event: NgbNavChangeEvent): void {\r\n    this.selectedTab = event.nextId;\r\n    this.listAssets(this.selectedTab, null);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".no-results {\r\n  p {\r\n    text-align: center;\r\n  }\r\n}\r\n",
                    "styleUrl": "./asset-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Assets</h1>\r\n<ul\r\n  ngbNav\r\n  #nav=\"ngbNav\"\r\n  (navChange)=\"onChangeTab($event)\"\r\n  [(activeId)]=\"selectedTab\"\r\n  class=\"nav-tabs mb-3\"\r\n>\r\n  <li *ngFor=\"let type of assetTypes\" [ngbNavItem]=\"type\">\r\n    <a ngbNavLink>{{ type }}s</a>\r\n    <ng-template ngbNavContent>\r\n      <div class=\"row mb-3\">\r\n        <div class=\"col-12 co-sm-4 col-md-3 col-xl-2\">\r\n          <button\r\n            class=\"btn btn-block btn-outline-primary\"\r\n            (click)=\"handleUploadAssetModal(uploadAssetModal)\"\r\n          >\r\n            Upload {{ type }}\r\n          </button>\r\n        </div>\r\n        <div class=\"col\">\r\n          <cms-asset-search\r\n            [assetType]=\"type\"\r\n            placeholderText=\"{{ 'Search ' + type + 's' }}\"\r\n            [searchTerm]=\"\"\r\n            (searched)=\"handleSearch($event)\"\r\n          ></cms-asset-search>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"!loading\">\r\n        <div *ngFor=\"let asset of assets\">\r\n          <cms-asset-update\r\n            [assetType]=\"type\"\r\n            [isNew]=\"false\"\r\n            [asset]=\"asset\"\r\n            (onDelete)=\"listAssets(type, null)\"\r\n          ></cms-asset-update>\r\n        </div>\r\n        <div class=\"no-results\" *ngIf=\"assets && !assets.length\">\r\n          <cms-no-results message=\"No {{ type }}s found\"></cms-no-results>\r\n        </div>\r\n      </div>\r\n    </ng-template>\r\n  </li>\r\n</ul>\r\n\r\n<div class=\"container-fluid\">\r\n  <div [ngbNavOutlet]=\"nav\"></div>\r\n</div>\r\n\r\n<ng-template #uploadAssetModal>\r\n  <cms-asset-upload\r\n    [assetType]=\"selectedTab\"\r\n    (cancel)=\"modalReference.dismiss()\"\r\n    (submit)=\"handleSubmit()\"\r\n  ></cms-asset-upload>\r\n</ng-template>\r\n\r\n<!-- LOADING INDICATOR -->\r\n<ngx-spinner\r\n  class=\"assetlist-spinner\"\r\n  type=\"ball-beat\"\r\n  bdColor=\"rgba(255, 255, 255, 0.38)\"\r\n  color=\"#969696\"\r\n  [fullScreen]=\"false\"\r\n></ngx-spinner>\r\n"
        },
        {
            "name": "AssetPickerComponent",
            "id": "component-AssetPickerComponent-0141df025dd3d4cdc2f87556c467236f",
            "file": "projects/lib/src/admin/components/asset-picker/asset-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-asset-picker",
            "styleUrls": [
                "./asset-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./asset-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alive",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "list",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "parameters",
                    "defaultValue": "{\r\n    page: 1,\r\n    pageSize: 10,\r\n    filters: {}\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "previousSearchTerm",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "searchForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "onFormChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "search",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { HeadStartSDK } from '@ordercloud/headstart-sdk';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { debounceTime, takeWhile, filter } from 'rxjs/operators';\r\nimport { NgxSpinnerService } from \"ngx-spinner\";\r\n\r\n@Component({\r\n  selector: 'cms-asset-picker',\r\n  templateUrl: './asset-picker.component.html',\r\n  styleUrls: ['./asset-picker.component.scss']\r\n})\r\nexport class AssetPickerComponent implements OnInit, OnDestroy {\r\n  loading = true;\r\n  alive = true;\r\n  previousSearchTerm = ''\r\n  searchForm: FormGroup\r\n  list: any;\r\n  parameters = {\r\n    page: 1,\r\n    pageSize: 10,\r\n    filters: {}\r\n  }\r\n\r\n  constructor(\r\n    public modal: NgbActiveModal, \r\n    private formBuilder: FormBuilder, \r\n    private spinner: NgxSpinnerService\r\n    ) { }\r\n\r\n  \r\n\r\n  ngOnInit(): void {\r\n    this.searchForm = this.formBuilder.group({search: ''})\r\n    this.onFormChanges();\r\n    this.changePage(1);\r\n  }\r\n\r\n  onFormChanges() {\r\n    this.searchForm.controls['search'].valueChanges\r\n      .pipe(\r\n        filter((searchTerm) =>  searchTerm !== this.previousSearchTerm),\r\n        debounceTime(500),\r\n        takeWhile(() => this.alive)\r\n      )\r\n      .subscribe((searchTerm) => {\r\n        this.previousSearchTerm = searchTerm;\r\n        this.search();\r\n      });\r\n  }\r\n\r\n  search() {\r\n    // undefined if empty string so sdk ignores parameter completely\r\n    const searchTerm = this.searchForm.controls.search.value || undefined;\r\n    this.parameters.filters['Title'] = searchTerm;\r\n    this.changePage(1);\r\n  }\r\n\r\n  changePage(page: number) {\r\n    this.loading = true;\r\n    this.spinner.show();\r\n    this.parameters.page = page;\r\n    return HeadStartSDK.Assets.List(this.parameters)\r\n      .then(assetList => {\r\n        this.list = assetList;\r\n      })\r\n      .catch(e => {\r\n        if(e.response.status === 401) {\r\n          alert('Access forbidden');\r\n        } else {\r\n          alert(e.message);\r\n        }\r\n      })\r\n      .finally(() => {\r\n        this.loading = false;\r\n        this.spinner.hide()\r\n      })\r\n  }\r\n  \r\n  ngOnDestroy() {\r\n    this.alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$asset-item-margin: 10px;\r\n\r\n.asset-list {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n    margin: 0 -($asset-item-margin);\r\n}\r\n\r\n.asset-item {\r\n    cursor: pointer;\r\n    margin: $asset-item-margin;\r\n}\r\n\r\n.asset-image {\r\n    max-width: 200px;\r\n}\r\n\r\n.modal-body {\r\n    min-height: 590px;\r\n}\r\n\r\n.pagination-container {\r\n    margin-top: 30px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}",
                    "styleUrl": "./asset-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\">Browse Assets</h4>\r\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss()\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <form [formGroup]=\"searchForm\">\r\n        <div class=\"form-group\">\r\n            <label for=\"asset-search\" ngbAutofocus class=\"sr-only\">Search for an asset by title</label>\r\n            <input type=\"text\" class=\"form-control\" formControlName=\"search\" id=\"asset-search\"\r\n                placeholder=\"Search for an asset by title\">\r\n        </div>\r\n    </form>\r\n    <div *ngIf=\"!list?.Items?.length && !loading\">\r\n        <cms-no-results message=\"No assets were found\"></cms-no-results>\r\n    </div>\r\n    <div class=\"asset-list\" *ngIf=\"list?.Items?.length\">\r\n        <div class=\"asset-item\" *ngFor=\"let asset of list.Items\" (click)=\"modal.close(asset)\">\r\n            <img class=\"asset-item_img\" src=\"{{asset.Url}}\" alt=\"{{asset.title}}\">\r\n        </div>\r\n    </div>\r\n    <div class=\"pagination-container\">\r\n        <ngb-pagination [maxSize]=\"5\" [boundaryLinks]=\"true\" *ngIf=\"list\" [collectionSize]=\"list.Meta.TotalCount\"\r\n            [(pageSize)]=\"list.Meta.PageSize\" [(page)]=\"list.Meta.Page\" aria-label=\"Pagination Buttons\"\r\n            (pageChange)=\"changePage($event)\">\r\n        </ngb-pagination>\r\n    </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"modal.dismiss()\">Close</button>\r\n</div>\r\n<ngx-spinner class=\"asset-picker-spinner\" type = \"ball-beat\" bdColor=\"rgba(255, 255, 255, 0.38)\" color=\"#969696\" [fullScreen]=\"false\"></ngx-spinner>"
        },
        {
            "name": "AssetSearchComponent",
            "id": "component-AssetSearchComponent-f0f08d82a1e894d5be7d8b7509e12bdd",
            "file": "projects/lib/src/admin/components/asset-search/asset-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-asset-search",
            "styleUrls": [
                "./asset-search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./asset-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "assetType",
                    "line": 18
                },
                {
                    "name": "placeholderText",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "searchTerm",
                    "line": 23,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "searched",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "alive",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "previousSearchTerm",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "onFormChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "onQueryParamChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "search",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "showClear",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 65
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n  Input,\r\n  EventEmitter,\r\n  Output,\r\n} from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { debounceTime, takeWhile, filter } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cms-asset-search',\r\n  templateUrl: './asset-search.component.html',\r\n  styleUrls: ['./asset-search.component.scss']\r\n})\r\nexport class AssetSearchComponent implements OnInit, OnDestroy {\r\n  @Input() assetType;\r\n  alive = true;\r\n  @Input()\r\n  placeholderText?: string;\r\n  @Input()\r\n  searchTerm?: string;\r\n  @Output()\r\n  searched = new EventEmitter<string>();\r\n  form: FormGroup;\r\n  previousSearchTerm = '';\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.formBuilder.group({ search: this.searchTerm || '' });\r\n    this.onFormChanges();\r\n    this.onQueryParamChanges();\r\n  }\r\n\r\n  onFormChanges() {\r\n    this.form.controls['search'].valueChanges\r\n      .pipe(\r\n        filter((searchTerm) => {\r\n          const searchTermChanged = searchTerm !== this.previousSearchTerm;\r\n          return searchTermChanged;\r\n        }),\r\n        debounceTime(500),\r\n        takeWhile(() => this.alive)\r\n      )\r\n      .subscribe((searchTerm) => {\r\n        this.previousSearchTerm = searchTerm;\r\n      });\r\n  }\r\n\r\n  search() {\r\n    const searchTerm = this.form.controls.search.value;\r\n    // emit as undefined if empty string so sdk ignores parameter completely\r\n    this.searched.emit(searchTerm || undefined);\r\n  }\r\n\r\n  onQueryParamChanges() {\r\n    // clear search bar if products are no longer filtered by search term\r\n\r\n  }\r\n\r\n  showClear(): boolean {\r\n    return this.form.get('search').value !== '';\r\n  }\r\n\r\n  clear(): void {\r\n    this.form.setValue({ search: '' });\r\n    this.search();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.alive = false;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./asset-search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<form [formGroup]=\"form\"\r\n#searchform\r\n(ngSubmit)=\"search()\">\r\n    <label for=\"search-addon\"\r\n    class=\"sr-only\">{{placeholderText || 'Search...'}}</label>\r\n    <div class=\"input-group\">\r\n        <input type=\"search\"\r\n            class=\"form-control\"\r\n            placeholder=\"{{placeholderText || 'Search...'}}\"\r\n            aria-label=\"Asset search\"\r\n            id=\"search-addon\"\r\n            formControlName=\"search\" />\r\n        <div *ngIf=\"showClear()\" class=\"input-group-append\">\r\n            <button type=\"submit\"\r\n                    class=\"btn btn-default\">\r\n                    Submit\r\n            </button>\r\n            <button (click)=\"clear()\"\r\n                    type=\"button\"\r\n                    class=\"btn btn-outline text-danger\">\r\n                    Clear Search\r\n            </button>\r\n        </div>\r\n    </div>\r\n</form> "
        },
        {
            "name": "AssetUpdateComponent",
            "id": "component-AssetUpdateComponent-5eb780ecc51559ec6953881a3b5aa7f4",
            "file": "projects/lib/src/admin/components/asset-update/asset-update.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-asset-update",
            "styleUrls": [
                "./asset-update.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./asset-update.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "asset",
                    "line": 14,
                    "type": "any"
                },
                {
                    "name": "assetType",
                    "line": 15,
                    "type": "any"
                },
                {
                    "name": "isNew",
                    "line": 16,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSubmit",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "assetForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "fileDropEl",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fileDropRef', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteAsset",
                    "args": [
                        {
                            "name": "assetID",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "assetID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "formValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "saveChanges",
                    "args": [
                        {
                            "name": "asset",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "asset",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "uploadFile",
                    "args": [
                        {
                            "name": "file",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\r\nimport { HeadStartSDK } from '@ordercloud/headstart-sdk';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'cms-asset-update',\r\n  templateUrl: './asset-update.component.html',\r\n  styleUrls: ['./asset-update.component.scss']\r\n})\r\nexport class AssetUpdateComponent implements OnInit {\r\n  @ViewChild(\"fileDropRef\", { static: false }) fileDropEl: ElementRef;\r\n  assetForm: FormGroup;\r\n\r\n  @Input() asset?: any;\r\n  @Input() assetType: any;\r\n  @Input() isNew: boolean;\r\n  @Output() onSubmit = new EventEmitter();\r\n  @Output() onDelete = new EventEmitter();\r\n\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.setForm();\r\n  }\r\n\r\n  setForm(): void {\r\n    const formGroup = {\r\n      Title: [this.asset ? this.asset.Title : null, Validators.required],\r\n      Url: [this.asset ? this.asset.Url : null, null],\r\n      Active: [this.asset ? this.asset.Active : false],\r\n      ID: [this.asset ? this.asset.ID : null, null],\r\n      Type: [this.asset ? this.asset.Type : this.assetType],\r\n      FileName: [this.asset ? this.asset.FileName : null],\r\n    };\r\n\r\n    this.assetForm = this.formBuilder.group(formGroup);\r\n  }\r\n\r\n  uploadFile(file): void {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      this.assetForm.controls['Url'].setValue(e.target['result']);\r\n    };\r\n    reader.readAsDataURL(file);\r\n    this.assetForm.controls['FileName'].setValue(file.name);\r\n  }\r\n\r\n  formValid(): boolean {\r\n    return this.assetForm.valid;\r\n  }\r\n\r\n  deleteAsset(assetID: string) {\r\n    return HeadStartSDK.Assets.Delete(assetID).then(() => {\r\n      this.onDelete.emit();\r\n    });\r\n  }\r\n\r\n  saveChanges(asset) {\r\n    let updatedAsset = asset.value;\r\n    if (this.isNew) {\r\n      return HeadStartSDK.Upload.UploadAsset(updatedAsset).then(() => {\r\n        this.isNew = false;\r\n        this.onSubmit.emit({\r\n          action: 'UploadAsset',\r\n          asset: updatedAsset\r\n        });\r\n      })\r\n    } else {\r\n      return HeadStartSDK.Assets.Update(updatedAsset.ID, updatedAsset).then(() => {\r\n        this.onSubmit.emit({\r\n          action: 'Update',\r\n          asset: updatedAsset\r\n        });\r\n      })\r\n    }\r\n  }\r\n\r\n  deleteFile() {\r\n    this.assetForm.controls['Url'].setValue(null);\r\n    this.assetForm.controls['FileName'].setValue(null);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 100%;\r\n}\r\n\r\n.dropzone {\r\n  padding: 2rem;\r\n  text-align: center;\r\n  border: dashed 1px #979797;\r\n  position: relative;\r\n  margin: 0 auto;\r\n\r\n  input {\r\n    opacity: 0;\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0;\r\n    left: 0;\r\n  }\r\n\r\n  label {\r\n    color: white;\r\n    width: 183px;\r\n    height: 44px;\r\n    border-radius: 21.5px;\r\n    background-color: #979797;\r\n    padding: 8px 16px;\r\n  }\r\n}\r\n\r\n.fileover {\r\n  background-color: rgb(187, 255, 148);\r\n}\r\n",
                    "styleUrl": "./asset-update.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"tab-container\">\r\n  <form *ngIf=\"assetForm\" [formGroup]=\"assetForm\">\r\n    <div class=\"row\">\r\n      <div class=\"form-group col-12 co-sm-4 col-md-3 col-xl-2\">\r\n        <img\r\n          *ngIf=\"(assetForm?.controls)['Url']?.value && assetType == 'Image'\"\r\n          class=\"card-img-top img-fluid flex-shrink-0\"\r\n          [src]=\"assetForm.controls['Url'].value\"\r\n        />\r\n        <div *ngIf=\"isNew\">\r\n          <small>{{ (assetForm?.controls)[\"FileName\"]?.value }}</small>\r\n          <button\r\n            *ngIf=\"(assetForm?.controls)['Url']?.value\"\r\n            type=\"button\"\r\n            class=\"btn btn-sm btn-danger\"\r\n            (click)=\"deleteFile()\"\r\n          >\r\n            Remove {{ assetType }}\r\n          </button>\r\n          <div\r\n            *ngIf=\"!(assetForm?.controls)['Url']?.value\"\r\n            class=\"dropzone\"\r\n            cmsDragAndDrop\r\n            (fileDropped)=\"uploadFile($event)\"\r\n          >\r\n            <input\r\n              type=\"file\"\r\n              #fileDropRef\r\n              id=\"fileDropRef\"\r\n              (change)=\"uploadFile($event.target.files[0])\"\r\n            />\r\n            <p>Drage and drop {{ assetType }} here</p>\r\n            <p>or</p>\r\n            <label for=\"fileDropRef\">Browse for file</label>\r\n          </div>\r\n        </div>\r\n        <input\r\n          [hidden]=\"true\"\r\n          class=\"form-control\"\r\n          id=\"{{ asset ? asset.ID : 'new' }}\"\r\n          type=\"file\"\r\n          accept=\"image/*,.pdf\"\r\n          (change)=\"uploadFile($event.target.files[0])\"\r\n          placeholder=\"Upload file\"\r\n        />\r\n        <button *ngIf=\"!isNew\" type=\"button\" class=\"btn btn-default\">\r\n          <label class=\"mb-0\" for=\"{{ asset ? asset.ID : 'new' }}\">\r\n            <small>\r\n              {{\r\n                assetForm.controls[\"Url\"] && assetForm.controls[\"Url\"].value\r\n                  ? \"Replace\"\r\n                  : \"Add\"\r\n              }}\r\n              <span class=\"d-none d-sm-block\">{{ assetType }}</span>\r\n            </small>\r\n          </label>\r\n        </button>\r\n      </div>\r\n      <div class=\"form-group col\">\r\n        <label for=\"Title\">Title</label>\r\n        <input\r\n          type=\"text\"\r\n          formControlName=\"Title\"\r\n          class=\"form-control\"\r\n          id=\"Title\"\r\n          placeholder=\"Title\"\r\n          autofocus=\"true\"\r\n          pattern=\"([A-Za-z0-9\\-\\_]+)\"\r\n          autocomplete=\"off\"\r\n        />\r\n        <label for=\"ID\">ID</label>\r\n        <input\r\n          type=\"text\"\r\n          formControlName=\"ID\"\r\n          class=\"form-control\"\r\n          id=\"ID\"\r\n          placeholder=\"ID\"\r\n          autofocus=\"true\"\r\n          pattern=\"([A-Za-z0-9\\-\\_]+)\"\r\n          autocomplete=\"off\"\r\n        />\r\n        <label for=\"Url\">Url</label>\r\n        <input\r\n          type=\"text\"\r\n          formControlName=\"Url\"\r\n          class=\"form-control\"\r\n          id=\"Url\"\r\n          placeholder=\"Url\"\r\n          autofocus=\"true\"\r\n          autocomplete=\"off\"\r\n        />\r\n        <div class=\"checkbox\">\r\n          <label for=\"{{ asset ? 'Active_' + asset.ID : 'newActive' }}\">\r\n            <input\r\n              formControlName=\"Active\"\r\n              type=\"checkbox\"\r\n              id=\"{{ asset ? 'Active_' + asset.ID : 'newActive' }}\"\r\n            />\r\n            Active\r\n          </label>\r\n        </div>\r\n        <button\r\n          class=\"btn btn-sm btn-primary\"\r\n          [disabled]=\"!formValid()\"\r\n          (click)=\"saveChanges(assetForm)\"\r\n        >\r\n          {{ isNew ? \"Create \" + assetType : \"Save Changes\" }}\r\n        </button>\r\n        <button\r\n          *ngIf=\"!isNew\"\r\n          class=\"btn btn-sm btn-danger\"\r\n          (click)=\"deleteAsset(asset.ID)\"\r\n        >\r\n          Delete {{ assetType }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "AssetUploadComponent",
            "id": "component-AssetUploadComponent-1567c5e4a8bee9d82b94dcc9bfcfb0a4",
            "file": "projects/lib/src/admin/components/asset-upload/asset-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-asset-upload",
            "styleUrls": [
                "./asset-upload.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./asset-upload.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "assetType",
                    "line": 9
                }
            ],
            "outputsClass": [
                {
                    "name": "cancel",
                    "defaultValue": "new EventEmitter()",
                    "line": 10,
                    "type": "EventEmitter"
                },
                {
                    "name": "submit",
                    "defaultValue": "new EventEmitter()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'cms-asset-upload',\r\n  templateUrl: './asset-upload.component.html',\r\n  styleUrls: ['./asset-upload.component.scss']\r\n})\r\nexport class AssetUploadComponent implements OnInit {\r\n  @Input() assetType;\r\n  @Output() cancel = new EventEmitter();\r\n  @Output() submit = new EventEmitter();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./asset-upload.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-content\">\r\n    <div class=\"modal-body\">\r\n        <h2>New {{assetType}}</h2>\r\n        <cms-asset-update [assetType]=\"assetType\" \r\n        [isNew]=\"true\"\r\n        (onSubmit)=\"submit.emit($event)\"></cms-asset-update>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button class=\"btn btn-outline-grey\" (click)=\"cancel.emit()\">\r\n            Cancel\r\n        </button>\r\n    </div>\r\n</div>"
        },
        {
            "name": "CarouselEditorComponent",
            "id": "component-CarouselEditorComponent-b0a10466de5cff164665915b621c67c3",
            "file": "projects/lib/src/admin/components/carousel-editor/carousel-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-carousel-editor",
            "styleUrls": [
                "./carousel-editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./carousel-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "CAROUSEL_SLIDES",
                    "defaultValue": "'CAROUSEL_SLIDES'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "carouselSettings",
                    "defaultValue": "{\r\n    speed: 300,\r\n    slidesToShow: 3,\r\n    slidesToScroll: 3,\r\n    rows: 1,\r\n    autoplay: true,\r\n    infinite: true,\r\n    dots: true,\r\n    arrows: true,\r\n    centerMode: false,\r\n    fade: true\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "carouselSettingsForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedSlide",
                    "type": "CarouselSlide",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "slideEditForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "slides",
                    "defaultValue": "[]",
                    "type": "CarouselSlide[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "zone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addCarousel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "buildCarouselHtml",
                    "args": [
                        {
                            "name": "carouselId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "carouselId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSlide",
                    "args": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "jsdoctags": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSlideIndex",
                    "args": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 124,
                    "jsdoctags": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 128,
                    "jsdoctags": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "onCarouselSettingsFormChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "onSlideEditFormChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "openAssetPicker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "selectSlide",
                    "args": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "jsdoctags": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, NgZone } from '@angular/core';\r\nimport { NgbActiveModal, NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AssetPickerComponent } from '../asset-picker/asset-picker.component';\r\nimport { CarouselSlide } from '../../models/carousel-slide.interface';\r\nimport { v4 as guid } from 'uuid';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'cms-carousel-editor',\r\n  templateUrl: './carousel-editor.component.html',\r\n  styleUrls: ['./carousel-editor.component.scss']\r\n})\r\nexport class CarouselEditorComponent implements OnInit {\r\n  slideEditForm: FormGroup;\r\n  carouselSettingsForm: FormGroup;\r\n  selectedSlide: CarouselSlide;\r\n  subs = new Subscription();\r\n  CAROUSEL_SLIDES = 'CAROUSEL_SLIDES'\r\n\r\n  slides: CarouselSlide[] = [];\r\n  carouselSettings = {\r\n    speed: 300,\r\n    slidesToShow: 3,\r\n    slidesToScroll: 3,\r\n    rows: 1,\r\n    autoplay: true,\r\n    infinite: true,\r\n    dots: true,\r\n    arrows: true,\r\n    centerMode: false,\r\n    fade: true\r\n  };\r\n  constructor(\r\n    public modal: NgbActiveModal,\r\n    private modalService: NgbModal,\r\n    private formBuilder: FormBuilder,\r\n    public zone: NgZone\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.carouselSettingsForm = this.formBuilder.group(this.carouselSettings)\r\n    this.slideEditForm = this.formBuilder.group({ Heading: '', Subheading: '', ActionText: '', ActionUrl: '' })\r\n    this.onSlideEditFormChanges();\r\n    this.onCarouselSettingsFormChanges();\r\n  }\r\n\r\n  onSlideEditFormChanges() {\r\n    this.slideEditForm.valueChanges.subscribe(formValues => {\r\n      const index = this.getSlideIndex(this.selectedSlide)\r\n      this.slides[index] = { ...this.selectedSlide, ...formValues }\r\n    })\r\n  }\r\n\r\n  onCarouselSettingsFormChanges() {\r\n    this.carouselSettingsForm.valueChanges.subscribe(formValues => {\r\n      this.carouselSettings = formValues;\r\n    })\r\n  }\r\n\r\n  addCarousel() {\r\n    const carouselId = `oc-carousel-${guid()}`;\r\n    const html = this.buildCarouselHtml.bind(this)(carouselId)\r\n    this.modal.close(html);\r\n  }\r\n\r\n  buildCarouselHtml(carouselId) {\r\n    return `\r\n    <div class=\"carousel-wrapper\" contenteditable=\"false\">\r\n      <div id=\"${carouselId}\">\r\n        ${this.slides.map(slide => {\r\n          return `\r\n            <div class=\"c-slide-container\">\r\n              <img src=\"${slide.ImageUrl}\" title=\"${slide.ImageTitle}\"/>\r\n              ${slide.Heading ? `<h1>${slide.Heading}</h1>` : ``}\r\n              ${slide.Subheading ? `<h2>${slide.Heading}</h2>` : ``}\r\n              ${slide.ActionUrl && slide.ActionText ? `<a href=\"${slide.ActionUrl}\">${slide.ActionText}</a>` : ``}\r\n            </div>\r\n            `\r\n        }).join('')}\r\n      </div>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.css\"/>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick-theme.min.css\"/>\r\n    <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.js\"></script>\r\n    <script>\r\n      $(document).ready(function() {\r\n        $('#${carouselId}').slick({slidesToShow: 3});\r\n      });\r\n    </script>\r\n    </div>\r\n    `\r\n  }\r\n\r\n  deleteSlide(slide: CarouselSlide) {\r\n    this.slides = this.slides.filter(s => s.ID !== slide.ID)\r\n    if (this.isSelected(slide)) {\r\n      delete this.selectedSlide;\r\n      if (this.slides.length) {\r\n        this.selectedSlide = this.slides[this.slides.length - 1];\r\n      }\r\n    }\r\n  }\r\n\r\n  openAssetPicker() {\r\n    const modalRef = this.modalService.open(AssetPickerComponent, {\r\n      size: 'xl',\r\n      centered: true,\r\n      backdropClass: 'oc-tinymce-modal_backdrop',\r\n      windowClass: 'oc-tinymce-modal_window'\r\n    });\r\n    modalRef.result.then(asset => {\r\n      const slide = {\r\n        ID: guid(),\r\n        ImageTitle: asset.Title,\r\n        ImageUrl: asset.Url\r\n      };\r\n      this.slides.unshift(slide);\r\n      this.selectSlide(slide);\r\n    })\r\n  }\r\n\r\n  getSlideIndex(slide: CarouselSlide) {\r\n    return this.slides.map(a => a.ID).indexOf(slide.ID);\r\n  }\r\n\r\n  isSelected(slide: CarouselSlide) {\r\n    if (!slide) {\r\n      return false;\r\n    }\r\n    if (!this.selectedSlide) {\r\n      return false;\r\n    }\r\n    return this.selectedSlide.ID === slide.ID;\r\n  }\r\n\r\n  selectSlide(slide: CarouselSlide) {\r\n    this.selectedSlide = slide;\r\n    this.slideEditForm.controls['Heading'].setValue(slide.Heading)\r\n    this.slideEditForm.controls['Subheading'].setValue(slide.Subheading)\r\n    this.slideEditForm.controls['ActionText'].setValue(slide.ActionText)\r\n    this.slideEditForm.controls['ActionUrl'].setValue(slide.ActionUrl)\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// carousel\r\n$slide-height: 75px;\r\n$slide-width: $slide-height;\r\n$slide-margin: 20px;\r\n$slide-row-height: $slide-height + $slide-margin + $slide-margin;\r\n$slide-bg: #C4C4C4;\r\n$slide-selected-color: #ffe600;\r\n\r\n.text-muted {\r\n  color: black;\r\n  opacity: .5;\r\n  font-size: 15px;\r\n}\r\n\r\n:host {\r\n    background-color: #F8F8F8;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: .6rem;\r\n  display: flex;\r\n\r\n  label {\r\n      flex-grow: 1;\r\n  }\r\n\r\n  input {\r\n      width: initial;\r\n  }\r\n}\r\n\r\n.slides {\r\n    display: grid;\r\n    margin: 0px (-$slide-margin);\r\n    grid-template-columns: repeat(auto-fit, minmax($slide-row-height, $slide-row-height));\r\n    max-height: 2 * $slide-row-height;\r\n    overflow-y: auto;\r\n    cursor: move;\r\n}\r\n\r\n.slide-selected {\r\n    -webkit-box-shadow: 0px 0px 17px -3px $slide-selected-color;\r\n    -moz-box-shadow: 0px 0px 17px -3px $slide-selected-color;\r\n    box-shadow: 0px 0px 17px -3px $slide-selected-color;\r\n}\r\n\r\n.slide {\r\n  margin: $slide-margin;\r\n  height: $slide-height;\r\n  width: $slide-width;\r\n  border-radius: 15px;\r\n  background-color: $slide-bg;\r\n  position: relative;\r\n  img {\r\n    object-fit: cover;\r\n    height: 100%;\r\n    width: 100%;\r\n    border-radius: 15px;\r\n  }\r\n\r\n  .icon-delete_forever {\r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: -7px;\r\n    right: -7px;\r\n    background-color: #FF4158;\r\n    width: 25px;\r\n    height: 25px;\r\n    border-radius: 50%;\r\n    text-align: center;\r\n\r\n    svg {\r\n      fill: white;\r\n      width: 20px;\r\n      height: 20px;\r\n    }\r\n  }\r\n}\r\n\r\n.add-image-btn {\r\n  margin: 15px 0;\r\n}\r\n",
                    "styleUrl": "./carousel-editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\">Carousel Builder</h4>\r\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-6 col-xl-7\">\r\n            <h4 class=\"text-muted\">Drag to rearrange the order of your carousel slides</h4>\r\n            <button class=\"btn btn-primary add-image-btn\" (click)=\"openAssetPicker()\">Add Image</button>\r\n            <div class=\"slides\">\r\n                <div class=\"slide\" *ngFor=\"let slide of slides\" (click)=\"selectSlide(slide)\"\r\n                    [ngClass]=\"{'slide-selected': isSelected(slide)}\">\r\n                    <img src=\"{{slide.ImageUrl}}\" alt=\"{{slide.ImageTitle}}\">\r\n                    <span (click)=\"deleteSlide(slide)\" class=\"icon-delete_forever\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                            <path\r\n                                d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z\" />\r\n                            </svg>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-lg-6 col-xl-5\" *ngIf=\"selectedSlide\">\r\n            <h4 class=\"text-muted\">Edit Slide {{getSlideIndex(selectedSlide) + 1}}</h4>\r\n            <form [formGroup]=\"slideEditForm\" autocomplete=\"off\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"slide-h1\">Heading</label>\r\n                    <input formControlName=\"Heading\" id=\"slide-h1\" class=\"form-control\" type=\"text\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"slide-h2\">Subheading</label>\r\n                    <input formControlName=\"Subheading\" id=\"slide-h2\" class=\"form-control\" type=\"text\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"slide-actiontext\">Action Text</label>\r\n                    <input formControlName=\"ActionText\" id=\"slide-actiontext\" class=\"form-control\" type=\"text\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"slide-actionurl\">Action URL</label>\r\n                    <input formControlName=\"ActionUrl\" id=\"slide-actionurl\" class=\"form-control\" type=\"text\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n    <hr>\r\n    <form [formGroup]=\"carouselSettingsForm\" autocomplete=\"off\">\r\n        <h4 class=\"text-muted\">\r\n            Carousel Settings\r\n        </h4>\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-6 col-xl-4\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"carousel-speed\">Carousel Speed <span class=\"text-muted\">(milliseconds)</span></label>\r\n                    <input formControlName=\"speed\" id=\"carousel-speed\" class=\"form-control\" type=\"number\"\r\n                        ngbAutofocus />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"carousel-slides-to-show\">Slides to Show</label>\r\n                    <input formControlName=\"slidesToShow\" id=\"carousel-slides-to-show\" class=\"form-control\"\r\n                        type=\"number\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"carousel-slides-to-scroll\">Slides to Scroll</label>\r\n                    <input formControlName=\"slidesToScroll\" id=\"carousel-slides-to-scroll\" class=\"form-control\"\r\n                        type=\"number\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"carousel-rows\">Rows</label>\r\n                    <input formControlName=\"rows\" id=\"carousel-rows\" class=\"form-control\" type=\"number\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"col-lg-6 col-xl-4 d-flex flex-column justify-content-between\">\r\n                <div class=\"custom-control custom-checkbox\">\r\n                    <input formControlName=\"autoplay\" type=\"checkbox\" class=\"custom-control-input\"\r\n                        id=\"carousel-autoplay\">\r\n                    <label class=\"custom-control-label\" for=\"carousel-autoplay\">Autoplay</label>\r\n                </div>\r\n                <div class=\"custom-control custom-checkbox\">\r\n                    <input formControlName=\"infinite\" type=\"checkbox\" class=\"custom-control-input\"\r\n                        id=\"carousel-infinite-loop\">\r\n                    <label class=\"custom-control-label\" for=\"carousel-infinite-loop\">Infinite Loop</label>\r\n                </div>\r\n                <div class=\"custom-control custom-checkbox\">\r\n                    <input formControlName=\"dots\" type=\"checkbox\" class=\"custom-control-input\" id=\"carousel-show-dots\">\r\n                    <label class=\"custom-control-label\" for=\"carousel-show-dots\">Show Dots</label>\r\n                </div>\r\n                <div class=\"custom-control custom-checkbox\">\r\n                    <input formControlName=\"arrows\" type=\"checkbox\" class=\"custom-control-input\"\r\n                        id=\"carousel-show-arrows\">\r\n                    <label class=\"custom-control-label\" for=\"carousel-show-arrows\">Show Arrows</label>\r\n                </div>\r\n                <div class=\"custom-control custom-checkbox\">\r\n                    <input formControlName=\"centerMode\" type=\"checkbox\" class=\"custom-control-input\"\r\n                        id=\"carousel-center-mode\">\r\n                    <label class=\"custom-control-label\" for=\"carousel-center-mode\">Center Mode</label>\r\n                </div>\r\n                <div class=\"custom-control custom-checkbox\">\r\n                    <input formControlName=\"fade\" type=\"checkbox\" class=\"custom-control-input\"\r\n                        id=\"carousel-fade-transition\">\r\n                    <label class=\"custom-control-label\" for=\"carousel-fade-transition\">Fade Transition</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!slides.length\" (click)=\"addCarousel()\">Add\r\n        Carousel</button>\r\n</div>"
        },
        {
            "name": "ConfirmModalComponent",
            "id": "component-ConfirmModalComponent-501acb682683a95563c41cc75a226265",
            "file": "projects/lib/src/admin/components/confirm-modal/confirm-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-confirm-modal",
            "styleUrls": [
                "./confirm-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cancelText",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "confirmText",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "message",
                    "line": 16,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "cancel",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "proceed",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'cms-confirm-modal',\r\n  templateUrl: './confirm-modal.component.html',\r\n  styleUrls: ['./confirm-modal.component.scss'],\r\n})\r\nexport class ConfirmModalComponent {\r\n  @Input()\r\n  confirmText?: string;\r\n\r\n  @Input()\r\n  cancelText?: string;\r\n\r\n  @Input()\r\n  message?: string;\r\n\r\n  @Output()\r\n  proceed = new EventEmitter();\r\n\r\n  @Output()\r\n  cancel = new EventEmitter();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./confirm-modal.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"modal-content\">\r\n  <div class=\"modal-body\">\r\n    <h5 class=\"text-center\">{{message || 'Are you sure?'}}</h5>\r\n  </div>\r\n  <div class=\"modal-footer\">\r\n    <button (click)=\"cancel.emit()\"\r\n            type=\"button\"\r\n            class=\"btn btn-secondary\">{{cancelText || 'Cancel'}}</button>\r\n    <button (click)=\"proceed.emit()\"\r\n            type=\"button\"\r\n            class=\"btn btn-primary\">{{confirmText || 'Proceed'}}</button>\r\n  </div>\r\n</div>"
        },
        {
            "name": "HtmlEditorComponent",
            "id": "component-HtmlEditorComponent-a611d084a640deed79658a2351107bd7",
            "file": "projects/lib/src/admin/components/html-editor/html-editor.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-html-editor",
            "styleUrls": [
                "./html-editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./html-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "editorOptions",
                    "line": 29,
                    "type": "any"
                },
                {
                    "name": "initialValue",
                    "line": 28,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "htmlChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "defaultEditorOptions",
                    "defaultValue": "{\r\n    base_url: '/tinymce',\r\n    suffix: '.min',\r\n    content_css:\r\n      'https://mgrstoragetest.azureedge.net/buyerweb/styles.e94215343d3493186ae1.css',\r\n    content_style: `\r\n    body {\r\n      padding:15px !important;\r\n    }\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container img {\r\n      display: none;\r\n    }\r\n\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container {\r\n      position: relative;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container::before {\r\n      content: '';\r\n      width: 100%;\r\n      height: 200px;\r\n      position: absolute;\r\n      background-color: lightgray;\r\n    }\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container::after {\r\n      font-weight: bold;\r\n      content: 'Carousel preview not available in edit mode. Click View > Preview';\r\n      z-index: 0;\r\n    }\r\n    `,\r\n    height: 500,\r\n\r\n    plugins: [\r\n      'ordercloud print paste importcss searchreplace autolink autosave save directionality',\r\n      'code visualblocks visualchars fullscreen image link media template codesample table charmap',\r\n      'hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools',\r\n      'textpattern noneditable help charmap emoticons',\r\n    ],\r\n    menubar: 'file edit view insert format tools table help',\r\n    menu: {\r\n      file: { title: 'File', items: 'newdocument restoredraft | oc-preview | print ' },\r\n      edit: { title: 'Edit', items: 'undo redo | cut copy paste | selectall | searchreplace' },\r\n      view: { title: 'View', items: 'code | visualaid visualchars visualblocks | spellchecker | oc-preview fullscreen' },\r\n      insert: { title: 'Insert', items: 'image link media template codesample inserttable | charmap emoticons hr | pagebreak nonbreaking anchor toc | insertdatetime' },\r\n      format: { title: 'Format', items: 'bold italic underline strikethrough superscript subscript codeformat | formats blockformats fontformats fontsizes align | forecolor backcolor | removeformat' },\r\n      tools: { title: 'Tools', items: 'spellchecker spellcheckerlanguage | code wordcount' },\r\n      table: { title: 'Table', items: 'inserttable | cell row column | tableprops deletetable' },\r\n      help: { title: 'Help', items: 'help' }\r\n    },\r\n    toolbar: [\r\n      'oc-carousel oc-product oc-section',\r\n      'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat',\r\n    ],\r\n    quickbars_selection_toolbar:\r\n      'bold italic | quicklink h2 h3 blockquote quickimage quicktable',\r\n    imagetools_toolbar:\r\n      'rotateleft rotateright | flipv fliph | editimage imageoptions',\r\n    contextmenu:\r\n      'link image imagetools table oc-product oc-row oc-col oc-section',\r\n    toolbar_sticky: true,\r\n    autosave_ask_before_unload: true,\r\n    autosave_interval: '30s',\r\n    autosave_prefix: '{path}{query}-{id}-',\r\n    autosave_restore_when_empty: false,\r\n    autosave_retention: '2m',\r\n    importcss_append: true,\r\n    toolbar_mode: 'sliding',\r\n    extended_valid_elements: 'script[src|async|defer|type|charset]',\r\n\r\n    /**\r\n     * Adds an advanced tab to set things like style/border/space\r\n     */\r\n    image_advtab: true,\r\n\r\n    /**\r\n     * object holding all OrderCloud enhanced functions\r\n     */\r\n    ordercloud: {},\r\n\r\n    /**\r\n     * Adds an upload tab (uploads to ordercloud cms)\r\n     */\r\n    image_uploadtab: true,\r\n    images_upload_handler(blobInfo, successCallback, errorCallback) {\r\n      // importing tinymce breaks things so we have to use instance from window\r\n      /* tslint:disable: no-string-literal */\r\n      window['tinymce'].execCommand('ocAssetUploader', true, {\r\n        blobInfo,\r\n        successCallback,\r\n        errorCallback,\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Adds ability to transform images\r\n     */\r\n\r\n    imagetools_cors_hosts: ['marktplacetest.blob.core.windows.net'],\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "html",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "resolvedEditorOptions",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "tinymceId",
                    "defaultValue": "`tiny-angular_${guid()}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "zone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 139,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141
                },
                {
                    "name": "onEditorChange",
                    "args": [
                        {
                            "name": "e",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openAssetPicker",
                    "args": [
                        {
                            "name": "callback",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        },
                        {
                            "name": "meta",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "jsdoctags": [
                        {
                            "name": "callback",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "meta",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCarouselEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 221
                },
                {
                    "name": "openPreviewModal",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 254,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSectionDateSettings",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 243,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSectionPicker",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 231,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  NgZone,\r\n  ViewEncapsulation,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AssetPickerComponent } from '../asset-picker/asset-picker.component';\r\nimport { CarouselEditorComponent } from '../carousel-editor/carousel-editor.component';\r\nimport { v4 as guid } from 'uuid';\r\nimport { SectionPickerComponent } from '../section-picker/section-picker.component';\r\nimport { SectionDateSettingsComponent } from '../section-date-settings/section-date-settings.component';\r\nimport { PagePreviewModalComponent } from '../page-preview-modal/page-preview-modal.component';\r\nimport { Asset } from '@ordercloud/headstart-sdk';\r\n\r\n@Component({\r\n  selector: 'cms-html-editor',\r\n  templateUrl: './html-editor.component.html',\r\n  styleUrls: ['./html-editor.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class HtmlEditorComponent implements OnInit, OnChanges {\r\n  @Input() initialValue: string;\r\n  @Input() editorOptions: any;\r\n  @Output() htmlChange = new EventEmitter<string>();\r\n  html: string;\r\n  resolvedEditorOptions: any = {};\r\n\r\n  tinymceId = `tiny-angular_${guid()}`;\r\n\r\n  defaultEditorOptions = {\r\n    base_url: '/tinymce',\r\n    suffix: '.min',\r\n    content_css:\r\n      'https://mgrstoragetest.azureedge.net/buyerweb/styles.e94215343d3493186ae1.css',\r\n    content_style: `\r\n    body {\r\n      padding:15px !important;\r\n    }\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container img {\r\n      display: none;\r\n    }\r\n\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container {\r\n      position: relative;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container::before {\r\n      content: '';\r\n      width: 100%;\r\n      height: 200px;\r\n      position: absolute;\r\n      background-color: lightgray;\r\n    }\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container::after {\r\n      font-weight: bold;\r\n      content: 'Carousel preview not available in edit mode. Click View > Preview';\r\n      z-index: 0;\r\n    }\r\n    `,\r\n    height: 500,\r\n\r\n    plugins: [\r\n      'ordercloud print paste importcss searchreplace autolink autosave save directionality',\r\n      'code visualblocks visualchars fullscreen image link media template codesample table charmap',\r\n      'hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools',\r\n      'textpattern noneditable help charmap emoticons',\r\n    ],\r\n    menubar: 'file edit view insert format tools table help',\r\n    menu: {\r\n      file: { title: 'File', items: 'newdocument restoredraft | oc-preview | print ' },\r\n      edit: { title: 'Edit', items: 'undo redo | cut copy paste | selectall | searchreplace' },\r\n      view: { title: 'View', items: 'code | visualaid visualchars visualblocks | spellchecker | oc-preview fullscreen' },\r\n      insert: { title: 'Insert', items: 'image link media template codesample inserttable | charmap emoticons hr | pagebreak nonbreaking anchor toc | insertdatetime' },\r\n      format: { title: 'Format', items: 'bold italic underline strikethrough superscript subscript codeformat | formats blockformats fontformats fontsizes align | forecolor backcolor | removeformat' },\r\n      tools: { title: 'Tools', items: 'spellchecker spellcheckerlanguage | code wordcount' },\r\n      table: { title: 'Table', items: 'inserttable | cell row column | tableprops deletetable' },\r\n      help: { title: 'Help', items: 'help' }\r\n    },\r\n    toolbar: [\r\n      'oc-carousel oc-product oc-section',\r\n      'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat',\r\n    ],\r\n    quickbars_selection_toolbar:\r\n      'bold italic | quicklink h2 h3 blockquote quickimage quicktable',\r\n    imagetools_toolbar:\r\n      'rotateleft rotateright | flipv fliph | editimage imageoptions',\r\n    contextmenu:\r\n      'link image imagetools table oc-product oc-row oc-col oc-section',\r\n    toolbar_sticky: true,\r\n    autosave_ask_before_unload: true,\r\n    autosave_interval: '30s',\r\n    autosave_prefix: '{path}{query}-{id}-',\r\n    autosave_restore_when_empty: false,\r\n    autosave_retention: '2m',\r\n    importcss_append: true,\r\n    toolbar_mode: 'sliding',\r\n    extended_valid_elements: 'script[src|async|defer|type|charset]',\r\n\r\n    /**\r\n     * Adds an advanced tab to set things like style/border/space\r\n     */\r\n    image_advtab: true,\r\n\r\n    /**\r\n     * object holding all OrderCloud enhanced functions\r\n     */\r\n    ordercloud: {},\r\n\r\n    /**\r\n     * Adds an upload tab (uploads to ordercloud cms)\r\n     */\r\n    image_uploadtab: true,\r\n    images_upload_handler(blobInfo, successCallback, errorCallback) {\r\n      // importing tinymce breaks things so we have to use instance from window\r\n      /* tslint:disable: no-string-literal */\r\n      window['tinymce'].execCommand('ocAssetUploader', true, {\r\n        blobInfo,\r\n        successCallback,\r\n        errorCallback,\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Adds ability to transform images\r\n     */\r\n\r\n    imagetools_cors_hosts: ['marktplacetest.blob.core.windows.net'],\r\n  };\r\n\r\n  constructor(private modalService: NgbModal, public zone: NgZone) { }\r\n\r\n  ngOnInit(): void {\r\n    this.html = this.initialValue;\r\n    Object.assign(\r\n      this.resolvedEditorOptions,\r\n      this.defaultEditorOptions,\r\n      this.editorOptions\r\n    );\r\n\r\n    this.resolvedEditorOptions.file_picker_callback = (\r\n      callback,\r\n      value,\r\n      meta\r\n    ) => {\r\n      this.zone.run(() => {\r\n        this.openAssetPicker.bind(this)(callback, value, meta);\r\n      });\r\n    };\r\n    this.resolvedEditorOptions.ordercloud.open_carousel_editor = (editor) => {\r\n      return this.zone.run(() => {\r\n        // we need to manually trigger change detection\r\n        // because this is running outside of the scope of angular\r\n        return this.openCarouselEditor.bind(this)(editor);\r\n      });\r\n    };\r\n    this.resolvedEditorOptions.ordercloud.open_section_picker = (data) => {\r\n      return this.zone.run(() => {\r\n        return this.openSectionPicker.bind(this)(data);\r\n      });\r\n    };\r\n    this.resolvedEditorOptions.ordercloud.open_section_date_settings = (\r\n      data\r\n    ) => {\r\n      return this.zone.run(() => {\r\n        return this.openSectionDateSettings.bind(this)(data);\r\n      });\r\n    };\r\n\r\n    this.resolvedEditorOptions.ordercloud.open_preview_modal = (data) => {\r\n      return this.zone.run(() => {\r\n        return this.openPreviewModal.bind(this)(data);\r\n      });\r\n    };\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // If the initial value changes and it is no longer the same as this.html, reinitialize this.html with the new initial value\r\n    if (\r\n      changes.initialValue &&\r\n      !changes.initialValue.firstChange &&\r\n      changes.initialValue.currentValue !== this.html\r\n    ) {\r\n      this.html = changes.initialValue.currentValue;\r\n    }\r\n  }\r\n\r\n  // TODO: Throttle this callback so that the emitter isn't fired multiple times for the same change.\r\n  onEditorChange(e: any): void {\r\n    this.htmlChange.emit(this.html);\r\n  }\r\n\r\n  openAssetPicker(callback, value, meta): void {\r\n    const modalRef = this.modalService.open(AssetPickerComponent, {\r\n      size: 'xl',\r\n      centered: true,\r\n      backdropClass: 'oc-tinymce-modal_backdrop',\r\n      windowClass: 'oc-tinymce-modal_window',\r\n    });\r\n    modalRef.result.then((asset: Asset) => {\r\n      if (meta.filetype === 'image') {\r\n        callback(asset.Url, { alt: asset.Title });\r\n      } else if (meta.filetype === 'file') {\r\n        // TODO: do\r\n        console.error('Filetype is not yet implemented');\r\n      } else if (meta.filetype === 'media') {\r\n        // TODO: do\r\n        console.error('Filetype is not yet implemented');\r\n      }\r\n    });\r\n  }\r\n\r\n  openCarouselEditor(): Promise<any> {\r\n    const modalRef = this.modalService.open(CarouselEditorComponent, {\r\n      size: 'xl',\r\n      centered: true,\r\n      backdropClass: 'oc-tinymce-modal_backdrop',\r\n      windowClass: 'oc-tinymce-modal_window',\r\n    });\r\n    return modalRef.result;\r\n  }\r\n\r\n  openSectionPicker(data): Promise<any> {\r\n    const modalRef = this.modalService.open(SectionPickerComponent, {\r\n      size: 'xl',\r\n      centered: true,\r\n      // TODO: might wanna abstract these classes / centered as default settings for any modal that's opened from the editor\r\n      backdropClass: 'oc-tinymce-modal_backdrop',\r\n      windowClass: 'oc-tinymce-modal_window',\r\n    });\r\n    modalRef.componentInstance.data = data;\r\n    return modalRef.result;\r\n  }\r\n\r\n  openSectionDateSettings(data): Promise<any> {\r\n    const modalRef = this.modalService.open(SectionDateSettingsComponent, {\r\n      size: 'md',\r\n      centered: true,\r\n      backdropClass: 'oc-tinymce-modal_backdrop',\r\n      windowClass: 'oc-tinymce-modal_window',\r\n    });\r\n    modalRef.componentInstance.data = data;\r\n    return modalRef.result;\r\n  }\r\n\r\n  openPreviewModal(data: {html: string, remoteCss: string}): Promise<any> {\r\n    const modalRef = this.modalService.open(PagePreviewModalComponent, {\r\n      size: 'xl', centered: true, backdropClass: 'oc-tinymce-modal_backdrop',\r\n      windowClass: 'oc-tinymce-modal_window',\r\n    });\r\n    modalRef.componentInstance.html = data.html;\r\n    modalRef.componentInstance.remoteCss = data.remoteCss;\r\n    return modalRef.result;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".oc-tinymce-modal_backdrop {\r\n  z-index: 1350 !important;\r\n}\r\n\r\n.oc-tinymce-modal_window {\r\n  z-index: 1351 !important;\r\n}\r\n",
                    "styleUrl": "./html-editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 137,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<editor\r\n  ng-if=\"resolvedEditorOptions\"\r\n  [id]=\"tinymceId\"\r\n  [init]=\"resolvedEditorOptions\"\r\n  [(ngModel)]=\"html\"\r\n  (onChange)=\"onEditorChange($event)\"\r\n  (onUndo)=\"onEditorChange($event)\"\r\n  (onRedo)=\"onEditorChange($event)\"\r\n  (onKeyUp)=\"onEditorChange($event)\"\r\n  (onNodeChange)=\"onEditorChange($event)\"\r\n  (onSetContent)=\"onEditorChange($event)\"\r\n></editor>\r\n"
        },
        {
            "name": "NoResultsComponent",
            "id": "component-NoResultsComponent-4c5111798c34103729960e3336445fb2",
            "file": "projects/lib/src/shared/components/no-results/no-results.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-no-results",
            "styleUrls": [
                "./no-results.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./no-results.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'cms-no-results',\n  templateUrl: './no-results.component.html',\n  styleUrls: ['./no-results.component.scss']\n})\nexport class NoResultsComponent implements OnInit {\n  @Input() message: string;\n  \n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 100%\r\n}\r\n\r\n.no-results {\r\n  background-color: #ececec;\r\n  width: 100%;\r\n  border-radius: 15px;\r\n  margin-top: 5%;\r\n\r\n  &_msg {\r\n    padding: 5px 0 5px 0;\r\n  }\r\n}\r\n",
                    "styleUrl": "./no-results.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"no-results\">\n    <p class=\"no-results_msg text-center\">\n        {{message}}\n    </p>\n</div>"
        },
        {
            "name": "PageEditorComponent",
            "id": "component-PageEditorComponent-8bbc72a72cbc4c7e73868f4d65a37d8f",
            "file": "projects/lib/src/admin/components/page-editor/page-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-page-editor",
            "styleUrls": [
                "./page-editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "document",
                    "line": 47,
                    "type": "JDocument"
                },
                {
                    "name": "editorOptions",
                    "line": 36,
                    "type": "any"
                },
                {
                    "name": "parentResourceID",
                    "defaultValue": "null",
                    "line": 46,
                    "type": "string"
                },
                {
                    "name": "renderSiteUrl",
                    "line": 35,
                    "type": "string"
                },
                {
                    "name": "resourceID",
                    "defaultValue": "null",
                    "line": 45,
                    "type": "string"
                },
                {
                    "name": "resourceType",
                    "defaultValue": "null",
                    "line": 37,
                    "type": "\"Products\" | \"Categories\" | \"Catalogs\" | \"Promotions\" | \"Suppliers\" | \"Buyers\" | \"ProductFacets\""
                }
            ],
            "outputsClass": [
                {
                    "name": "backClicked",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "pageDeleted",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 50,
                    "type": "EventEmitter"
                },
                {
                    "name": "pageSaved",
                    "defaultValue": "new EventEmitter<JDocument>()",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "automaticUrl",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "confirmModal",
                    "type": "NgbModalRef",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "isLoadingSave",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "page",
                    "type": "Partial<PageContentDoc>",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "pageNavigation",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "confirmDeletePage",
                    "args": [
                        {
                            "name": "confirmModalTemplate",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "jsdoctags": [
                        {
                            "name": "confirmModalTemplate",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "onAutomaticUrlChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 158,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onPageContentChange",
                    "args": [
                        {
                            "name": "html",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "html",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageNavigationChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "onPageStatusChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "onPageTitleKeyUp",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "saveChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<RequiredDeep<JDocument>>",
                    "typeParameters": [],
                    "line": 115,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport { kebab } from 'case';\r\nimport * as OrderCloudSDK from 'ordercloud-javascript-sdk';\r\nimport { PageContentDoc } from '../../models/page-content-doc.interface';\r\nimport { JDocument, HeadStartSDK } from '@ordercloud/headstart-sdk';\r\nimport { NgbModalRef, NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { PAGE_SCHEMA } from '../../constants/page-schema.constants';\r\nimport { RequiredDeep } from '@ordercloud/headstart-sdk/dist/models/RequiredDeep';\r\n\r\nexport const EMPTY_PAGE_CONTENT_DOC: Partial<PageContentDoc> = {\r\n  Title: '',\r\n  Url: '',\r\n  Description: '',\r\n  HeaderEmbeds: '',\r\n  Content: ``,\r\n  FooterEmbeds: '',\r\n  Active: false,\r\n  NavigationTitle: '',\r\n};\r\n\r\n@Component({\r\n  selector: 'cms-page-editor',\r\n  templateUrl: './page-editor.component.html',\r\n  styleUrls: ['./page-editor.component.scss'],\r\n})\r\nexport class PageEditorComponent implements OnInit, OnChanges {\r\n  @Input() renderSiteUrl: string;\r\n  @Input() editorOptions: any;\r\n  @Input() resourceType?:\r\n    | 'Products'\r\n    | 'Categories'\r\n    | 'Catalogs'\r\n    | 'Promotions'\r\n    | 'Suppliers'\r\n    | 'Buyers'\r\n    | 'ProductFacets' = null; // optional\r\n  @Input() resourceID?: string = null; // optional\r\n  @Input() parentResourceID?: string = null;\r\n  @Input() document?: JDocument;\r\n  @Output() backClicked = new EventEmitter<MouseEvent>();\r\n  @Output() pageSaved = new EventEmitter<JDocument>();\r\n  @Output() pageDeleted = new EventEmitter<string>();\r\n\r\n  page: Partial<PageContentDoc>;\r\n  automaticUrl: boolean;\r\n  pageNavigation: boolean;\r\n  confirmModal: NgbModalRef;\r\n  isLoadingSave: boolean;\r\n\r\n  constructor(private modalService: NgbModal) {}\r\n\r\n  ngOnInit(): void {\r\n    this.page = Object.assign(\r\n      {},\r\n      this.document ? this.document.Doc : EMPTY_PAGE_CONTENT_DOC\r\n    );\r\n    this.automaticUrl = this.page\r\n      ? this.page.Url === kebab(this.page.Title)\r\n      : true;\r\n    this.pageNavigation = Boolean(this.page ? this.page.NavigationTitle : true);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.\r\n    // Add '${implements OnChanges}' to the class.\r\n    if (changes.document && !changes.document.firstChange) {\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  onPageContentChange(html: string): void {\r\n    this.page = { ...this.page, Content: html };\r\n  }\r\n\r\n  onPageTitleKeyUp(value: string): void {\r\n    if (this.automaticUrl) {\r\n      this.page.Url = kebab(value);\r\n    }\r\n  }\r\n\r\n  onAutomaticUrlChange(): void {\r\n    if (this.automaticUrl && this.page.Title) {\r\n      this.page.Url = kebab(this.page.Title);\r\n    }\r\n  }\r\n\r\n  onPageNavigationChange(): void {\r\n    if (this.pageNavigation && !this.page.NavigationTitle) {\r\n      this.page.NavigationTitle = this.page.Title;\r\n    } else {\r\n      this.page.NavigationTitle = '';\r\n    }\r\n  }\r\n\r\n  onPageStatusChange(): void {\r\n    this.page.Active = !this.page.Active;\r\n  }\r\n\r\n  async onSubmit(): Promise<void> {\r\n    this.isLoadingSave = true;\r\n    const updated = await this.saveChanges().finally(\r\n      () => (this.isLoadingSave = false)\r\n    );\r\n    this.pageSaved.emit(updated);\r\n  }\r\n\r\n  async saveChanges(): Promise<RequiredDeep<JDocument>> {\r\n    const me = await OrderCloudSDK.Me.Get();\r\n    const nowDate = new Date().toISOString();\r\n    const fullName = `${me.FirstName} ${me.LastName}`;\r\n    let updated: RequiredDeep<JDocument>;\r\n\r\n    if (this.document && this.document.ID) {\r\n      updated = await HeadStartSDK.Documents.Update(\r\n        PAGE_SCHEMA.ID,\r\n        this.document.ID,\r\n        {\r\n          ID: this.document.ID,\r\n          Doc: {\r\n            ...this.page,\r\n            DateLastUpdated: nowDate,\r\n            LastUpdatedBy: fullName,\r\n          },\r\n        }\r\n      );\r\n    } else {\r\n      updated = await HeadStartSDK.Documents.Create(PAGE_SCHEMA.ID, {\r\n        Doc: {\r\n          ...this.page,\r\n          Author: fullName,\r\n          DateCreated: nowDate,\r\n          DateLastUpdated: nowDate,\r\n          LastUpdatedBy: fullName,\r\n        },\r\n      });\r\n    }\r\n\r\n    if (this.resourceType && this.resourceID) {\r\n      await HeadStartSDK.Documents.SaveAssignment(PAGE_SCHEMA.ID, {\r\n        ResourceID: this.resourceID,\r\n        ResourceType: this.resourceType,\r\n        ParentResourceID: this.parentResourceID,\r\n        DocumentID: updated.ID,\r\n      });\r\n    }\r\n\r\n    return updated;\r\n  }\r\n\r\n  async onDelete(): Promise<void> {\r\n    if (this.resourceType && this.resourceID) {\r\n      await HeadStartSDK.Documents.DeleteAssignment(\r\n        PAGE_SCHEMA.ID,\r\n        this.resourceID,\r\n        this.resourceType,\r\n        this.parentResourceID,\r\n        this.document.ID\r\n      );\r\n    }\r\n    await HeadStartSDK.Documents.Delete(PAGE_SCHEMA.ID, this.document.ID);\r\n    this.pageDeleted.emit(this.document.ID);\r\n    this.confirmModal.close();\r\n  }\r\n\r\n  confirmDeletePage(confirmModalTemplate): void {\r\n    this.confirmModal = this.modalService.open(confirmModalTemplate);\r\n  }\r\n\r\n  get hasChanges(): boolean {\r\n    return JSON.stringify(this.document.Doc) !== JSON.stringify(this.page);\r\n  }\r\n\r\n  get isValid(): boolean {\r\n    return Boolean(\r\n      this.page.Title &&\r\n        (this.page.Url || (!this.page.Url && this.page.Title === 'Home'))\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 100%;\r\n}\r\n\r\n.text-muted {\r\n  color: black;\r\n  opacity: .5;\r\n  font-size: 15px;\r\n}\r\n\r\n.nav-tabs {\r\n  margin-bottom: -1px;\r\n}\r\n\r\n.tab-container {\r\n  height: calc(100% - 114px);\r\n  overflow-y: auto;\r\n}\r\n",
                    "styleUrl": "./page-editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "hasChanges": {
                    "name": "hasChanges",
                    "getSignature": {
                        "name": "hasChanges",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 177
                    }
                },
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 181
                    }
                }
            },
            "templateData": "<div class=\"bg-light\">\r\n  <div class=\"container-fluid border-bottom pt-3\">\r\n    <div class=\"d-flex justify-content-between align-items-start mb-3\">\r\n      <div class=\"flex-grow-0 flex-shrink-1\">\r\n        <div class=\"d-flex justify-content-start align-items-center\">\r\n          <div class=\"flex-grow-0 flex-shrink-1\">\r\n            <button class=\"btn btn-link\" (click)=\"backClicked.emit($event)\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"24\"\r\n                height=\"24\"\r\n                viewBox=\"0 0 24 24\"\r\n                aria-hidden=\"true\"\r\n              >\r\n                <path d=\"M14 7l-5 5 5 5V7z\"></path>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n          <div class=\"flex-grow-0 flex-shrink-1 pr-3\">\r\n            <h4 class=\"m-0\">\r\n              {{ document.Doc.Title || \"Untitled\" }}\r\n            </h4>\r\n          </div>\r\n          <div class=\"flex-grow-0 flex-shrink-1\" *ngIf=\"hasChanges\">\r\n            <span class=\"badge badge-secondary\">Unsaved Changes</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"flex-grow-0 flex-shrink-1\">\r\n        <button\r\n          *ngIf=\"isLoadingSave\"\r\n          class=\"btn btn-primary\"\r\n          type=\"button\"\r\n          disabled\r\n        >\r\n          <span\r\n            class=\"spinner-border spinner-border-sm\"\r\n            role=\"status\"\r\n            aria-hidden=\"true\"\r\n          ></span>\r\n          Saving...\r\n        </button>\r\n        <button\r\n          *ngIf=\"!isLoadingSave\"\r\n          class=\"btn btn-primary\"\r\n          [disabled]=\"!hasChanges || !isValid\"\r\n          (click)=\"onSubmit()\"\r\n        >\r\n          {{ document.ID ? \"Save Changes\" : \"Create New Page\" }}\r\n        </button>\r\n        <button\r\n          *ngIf=\"document.ID && document.Doc && !document.Doc.Active\"\r\n          class=\"btn btn-outline-danger ml-3\"\r\n          (click)=\"confirmDeletePage(confirmDeleteModalTemplate)\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <ul ngbNav #nav=\"ngbNav\" [(activeId)]=\"selectedTab\" class=\"nav-tabs\">\r\n      <li ngbNavItem=\"0\" [destroyOnHide]=\"false\">\r\n        <a ngbNavLink>Settings</a>\r\n        <ng-template ngbNavContent>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-8\">\r\n              <div class=\"form-group\">\r\n                <label for=\"pageTitle\">Page Title</label>\r\n                <input\r\n                  id=\"pageTitle\"\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  [(ngModel)]=\"page.Title\"\r\n                  #pageTitle\r\n                  required\r\n                  maxlength=\"100\"\r\n                  (keyup)=\"onPageTitleKeyUp(pageTitle.value)\"\r\n                  placeholder=\"Choose a descriptive title for this page\"\r\n                />\r\n                <small id=\"pageTitleHelp\" class=\"form-text text-muted\">\r\n                  {{ 100 - (page.Title ? page.Title.length : 0) }} / 100\r\n                  characters remaining.\r\n                </small>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-4\">\r\n              <div class=\"form-group\">\r\n                <label for=\"pageStatus\">Page Status</label>\r\n                <div id=\"pageStatus\">\r\n                  <div\r\n                    class=\"custom-control custom-radio custom-control-inline\"\r\n                  >\r\n                    <input\r\n                      type=\"radio\"\r\n                      id=\"pageActive1\"\r\n                      name=\"pageActiveStatus\"\r\n                      class=\"custom-control-input\"\r\n                      [checked]=\"page.Active\"\r\n                      (change)=\"onPageStatusChange()\"\r\n                    />\r\n                    <label class=\"custom-control-label\" for=\"pageActive1\"\r\n                      >Active</label\r\n                    >\r\n                  </div>\r\n                  <div\r\n                    class=\"custom-control custom-radio custom-control-inline\"\r\n                  >\r\n                    <input\r\n                      type=\"radio\"\r\n                      id=\"pageActive2\"\r\n                      name=\"pageActiveStatus\"\r\n                      class=\"custom-control-input\"\r\n                      [checked]=\"!page.Active\"\r\n                      (change)=\"onPageStatusChange()\"\r\n                    />\r\n                    <label class=\"custom-control-label\" for=\"pageActive2\"\r\n                      >Disabled</label\r\n                    >\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"pageUrl\">Location</label>\r\n            <div class=\"input-group\">\r\n              <div class=\"input-group-prepend\">\r\n                <span class=\"input-group-text bg-light\">\r\n                  <div\r\n                    class=\"custom-control custom-checkbox custom-control-inline\"\r\n                  >\r\n                    <input\r\n                      class=\"custom-control-input\"\r\n                      id=\"automaticUrl\"\r\n                      type=\"checkbox\"\r\n                      (change)=\"onAutomaticUrlChange()\"\r\n                      [(ngModel)]=\"automaticUrl\"\r\n                    />\r\n                    <label class=\"custom-control-label\" for=\"automaticUrl\"\r\n                      >Auto</label\r\n                    >\r\n                  </div>\r\n                </span>\r\n              </div>\r\n              <input\r\n                id=\"pageUrl\"\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                [(ngModel)]=\"page.Url\"\r\n                (ngModelChange)=\"onPageUrlChange($event)\"\r\n                [readOnly]=\"automaticUrl\"\r\n                required\r\n                aria-describedby=\"pageUrlHelp\"\r\n                [placeholder]=\"\r\n                  automaticUrl\r\n                    ? 'This will be auto-generated based on the Page Title'\r\n                    : 'Choose a URL slug for this page'\r\n                \"\r\n              />\r\n            </div>\r\n            <small id=\"pageUrlHelp\" class=\"form-text text-muted\"\r\n              >This must be unique across all of your pages. Kebab case\r\n              recommended, use text relevant to this page for best SEO results.\r\n            </small>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"pageNavigation\">Navigation</label>\r\n            <div class=\"input-group\">\r\n              <div class=\"input-group-prepend\">\r\n                <span class=\"input-group-text bg-light\">\r\n                  <div\r\n                    class=\"custom-control custom-checkbox custom-control-inline\"\r\n                  >\r\n                    <input\r\n                      class=\"custom-control-input\"\r\n                      id=\"pageNavigation\"\r\n                      type=\"checkbox\"\r\n                      (change)=\"onPageNavigationChange()\"\r\n                      [(ngModel)]=\"pageNavigation\"\r\n                    />\r\n                    <label class=\"custom-control-label\" for=\"pageNavigation\"\r\n                      >Show</label\r\n                    >\r\n                  </div>\r\n                </span>\r\n              </div>\r\n              <input\r\n                id=\"pageNavigationTitle\"\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                [disabled]=\"!pageNavigation\"\r\n                [placeholder]=\"\r\n                  pageNavigation\r\n                    ? 'Choose a short, one to three word title for navigation elements'\r\n                    : 'This page will not show in normal page navigation'\r\n                \"\r\n                [(ngModel)]=\"page.NavigationTitle\"\r\n                aria-describedby=\"pageNavigationTitleHelp\"\r\n                (ngModelChange)=\"onPageNavigationTitleChange($event)\"\r\n              />\r\n            </div>\r\n            <small id=\"pageNavigationTitleHelp\" class=\"form-text text-muted\"\r\n              >Hidden pages can still be linked to using the URL Slug.\r\n            </small>\r\n          </div>\r\n        </ng-template>\r\n      </li>\r\n      <li ngbNavItem=\"1\" [destroyOnHide]=\"false\">\r\n        <a ngbNavLink>SEO</a>\r\n        <ng-template ngbNavContent>\r\n          <div class=\"form-group\">\r\n            <label for=\"metaTitle\">Meta Title</label>\r\n            <input\r\n              type=\"text\"\r\n              readonly=\"true\"\r\n              [(ngModel)]=\"page.Title\"\r\n              class=\"form-control\"\r\n              aria-describedby=\"metaTitleHelp\"\r\n            />\r\n            <small id=\"metaTitleHelp\" class=\"form-text text-muted\">\r\n              The SEO Meta Title is based off of the Page Title (available in\r\n              the Settings tab).\r\n            </small>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"pageImage\">Meta Image</label>\r\n            <p class=\"lead\" id=\"pageImage\">\r\n              TODO: Create AssetInputComponent\r\n            </p>\r\n            <!-- <cms-asset-input></cms-asset-input> -->\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"pageTitle\">Meta Description</label>\r\n            <textarea\r\n              id=\"pageDescription\"\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              [(ngModel)]=\"page.Description\"\r\n              maxlength=\"300\"\r\n              rows=\"4\"\r\n              required\r\n              aria-describedby=\"pageDescriptionHelp\"\r\n              placeholder=\"Describe this page in 300 characters or less\"\r\n            ></textarea>\r\n            <small id=\"pageDescriptionHelp\" class=\"form-text text-muted\">\r\n              {{ 300 - (page.Description ? page.Description.length : 0) }} / 300\r\n              characters remaining.\r\n            </small>\r\n          </div>\r\n        </ng-template>\r\n      </li>\r\n      <li ngbNavItem=\"2\" [destroyOnHide]=\"false\">\r\n        <a ngbNavLink>Content</a>\r\n        <ng-template ngbNavContent>\r\n          <div class=\"form-group\">\r\n            <label for=\"pageContent\" class=\"sr-only\">Page Content</label>\r\n            <cms-html-editor\r\n              [initialValue]=\"page.Content\"\r\n              [editorOptions]=\"editorOptions\"\r\n              (htmlChange)=\"onPageContentChange($event)\"\r\n            ></cms-html-editor>\r\n          </div>\r\n        </ng-template>\r\n      </li>\r\n      <li ngbNavItem=\"3\" [destroyOnHide]=\"false\">\r\n        <a ngbNavLink>Embeds</a>\r\n        <ng-template ngbNavContent>\r\n          <div class=\"form-group\">\r\n            <label for=\"pageHeaderEmbeds\">Header Embeds</label>\r\n            <textarea\r\n              id=\"pageHeaderEmbeds\"\r\n              type=\"text\"\r\n              rows=\"4\"\r\n              class=\"form-control\"\r\n              [(ngModel)]=\"page.HeaderEmbeds\"\r\n              placeholder=\"Copy and paste any scripts you want to execute in the <head> element\"\r\n            ></textarea>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"pageFooterEmbeds\">Footer Embeds</label>\r\n            <textarea\r\n              id=\"pageFooterEmbeds\"\r\n              type=\"text\"\r\n              rows=\"4\"\r\n              class=\"form-control\"\r\n              [(ngModel)]=\"page.FooterEmbeds\"\r\n              placeholder=\"Copy and paste any scripts you want to execute at the bottom of the <body> element\"\r\n            ></textarea>\r\n          </div>\r\n        </ng-template>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"tab-container container-fluid pt-3\">\r\n  <div class=\"row\">\r\n    <div\r\n      [ngClass]=\"{\r\n        'col-md-8 col-sm-7': selectedTab !== '2',\r\n        'col-12': selectedTab === '2'\r\n      }\"\r\n      [ngbNavOutlet]=\"nav\"\r\n    ></div>\r\n    <div class=\"col-md-4 col-sm-5\" *ngIf=\"selectedTab !== '2'\">\r\n      <cms-page-summary\r\n        [document]=\"document\"\r\n        [renderSiteUrl]=\"renderSiteUrl\"\r\n      ></cms-page-summary>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- CONFIRM DELETE MODAL -->\r\n<ng-template #confirmDeleteModalTemplate>\r\n  <cms-confirm-modal\r\n    message=\"Are you sure you want to delete this page?\"\r\n    (proceed)=\"onDelete()\"\r\n    (cancel)=\"confirmModal.close()\"\r\n  >\r\n  </cms-confirm-modal>\r\n</ng-template>\r\n"
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-23a7e1a05c15f90419582e4152ea8fb1",
            "file": "projects/lib/src/admin/components/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-page-list",
            "styleUrls": [
                "./page-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "editorOptions",
                    "line": 19,
                    "type": "any"
                },
                {
                    "name": "parentResourceID",
                    "defaultValue": "null",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "renderSiteUrl",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "resourceID",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "resourceType",
                    "line": 16,
                    "type": "ResourceType"
                }
            ],
            "outputsClass": [
                {
                    "name": "backClicked",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "pageCreated",
                    "defaultValue": "new EventEmitter<JDocument>()",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "pageDeleted",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "pageSaved",
                    "defaultValue": "new EventEmitter<JDocument>()",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "list",
                    "type": "JDocument[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "searchTerm",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "searchTermChanged",
                    "defaultValue": "new Subject<string>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selected",
                    "type": "JDocument",
                    "optional": true,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "goToList",
                    "args": [
                        {
                            "name": "e",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listDocs",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<RequiredDeep<ListPage<JDocument>>>",
                    "typeParameters": [],
                    "line": 75,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onPageDeleted",
                    "args": [
                        {
                            "name": "deletedId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "deletedId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageSaved",
                    "args": [
                        {
                            "name": "updated",
                            "type": "JDocument"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "updated",
                            "type": "JDocument",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchFieldChange",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectPage",
                    "args": [
                        {
                            "name": "page",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 118,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { HeadStartSDK, JDocument, ListPage } from '@ordercloud/headstart-sdk';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged } from 'rxjs/internal/operators';\r\nimport { PAGE_SCHEMA } from '../../constants/page-schema.constants';\r\nimport { RequiredDeep } from '@ordercloud/headstart-sdk/dist/models/RequiredDeep';\r\nimport { ResourceType } from '../../../shared/models/resource-type.interface';\r\n\r\n@Component({\r\n  selector: 'cms-page-list',\r\n  templateUrl: './page-list.component.html',\r\n  styleUrls: ['./page-list.component.scss'],\r\n})\r\nexport class PageListComponent implements OnInit {\r\n  @Input() resourceType: ResourceType;\r\n  @Input() resourceID: string;\r\n  @Input() parentResourceID?: string = null;\r\n  @Input() editorOptions: any;\r\n  @Input() renderSiteUrl: string;\r\n  @Output() backClicked = new EventEmitter<MouseEvent>();\r\n  @Output() pageSaved = new EventEmitter<JDocument>();\r\n  @Output() pageCreated = new EventEmitter<JDocument>();\r\n  @Output() pageDeleted = new EventEmitter<string>();\r\n  searchTerm = '';\r\n  searchTermChanged = new Subject<string>();\r\n  loading = true;\r\n  list: JDocument[];\r\n  selected?: JDocument;\r\n\r\n  constructor(private spinner: NgxSpinnerService) {}\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    if (!this.resourceType || !this.resourceID) {\r\n      throw new Error(\r\n        'cms-page-list is missing required props resourceType or resourceID'\r\n      );\r\n    }\r\n    this.spinner.show();\r\n    this.list = await this.listDocs()\r\n      .catch((ex) => {\r\n        if (\r\n          ex &&\r\n          ex.response &&\r\n          ex.response.data &&\r\n          ex.response.data.Data &&\r\n          ex.response.data.Data.ObjectID === PAGE_SCHEMA.ID\r\n        ) {\r\n          return HeadStartSDK.Schemas.Create(PAGE_SCHEMA as any).then(() =>\r\n            this.listDocs()\r\n          );\r\n        }\r\n        return ex;\r\n      })\r\n      .finally(() => {\r\n        this.loading = false;\r\n        this.spinner.hide();\r\n      });\r\n\r\n    // debounce search for 300ms\r\n    this.searchTermChanged\r\n      .pipe(debounceTime(300), distinctUntilChanged())\r\n      .subscribe((searchTerm) => {\r\n        this.searchTerm = searchTerm;\r\n        console.log(`Searched for ${searchTerm}`);\r\n        // uncomment below once Oliver has fixed bug: https://four51.atlassian.net/browse/SEB-872\r\n        // if(!this.listOptions.filters) {\r\n        //   this.listOptions.filters = {};\r\n        // }\r\n        // this.listOptions.filters['Doc.Title'] = searchTerm;\r\n        // this.ngOnInit();\r\n      });\r\n  }\r\n\r\n  async listDocs(): Promise<RequiredDeep<ListPage<JDocument>>> {\r\n    if (!this.resourceType || !this.resourceID) {\r\n      throw new Error(\r\n        'cms-page-list missing required props resourceType and resourceID for '\r\n      );\r\n    }\r\n    // TODO: remove 'as any' when ListDocuments returns correct type, currently it returns 'void' which is wrong\r\n    return (await HeadStartSDK.Documents.ListDocuments(\r\n      PAGE_SCHEMA.ID,\r\n      this.resourceID,\r\n      this.parentResourceID,\r\n      this.resourceType\r\n    )) as any;\r\n  }\r\n\r\n  onSearchFieldChange(searchTerm): void {\r\n    this.searchTermChanged.next(searchTerm);\r\n  }\r\n\r\n  onPageSaved(updated: JDocument): void {\r\n    const documentIndex = this.list.findIndex((d) => d.ID === updated.ID);\r\n    this.selected = updated;\r\n    if (documentIndex >= 0) {\r\n      this.list[documentIndex] = updated;\r\n      this.pageSaved.emit(updated);\r\n    } else {\r\n      this.list = [...this.list, updated];\r\n      this.pageCreated.emit(updated);\r\n    }\r\n  }\r\n\r\n  onPageDeleted(deletedId: string): void {\r\n    this.selected = undefined;\r\n    this.list = this.list.filter((d) => d.ID !== deletedId);\r\n    this.pageDeleted.emit(deletedId);\r\n  }\r\n\r\n  goToList(e: MouseEvent): void {\r\n    this.selected = undefined;\r\n    this.ngOnInit();\r\n    this.backClicked.emit(e);\r\n  }\r\n\r\n  async selectPage(page): Promise<void> {\r\n    if (!page) {\r\n      // create new page\r\n      page = {\r\n        ID: null,\r\n        Doc: {\r\n          Title: '',\r\n          Url: '',\r\n          SiteUrl: this.renderSiteUrl,\r\n          Description: '',\r\n          MetaImageUrl: '',\r\n          DateCreated: '',\r\n          Author: '',\r\n          DateLastUpdated: '',\r\n          LastUpdatedBy: '',\r\n          HeaderEmbeds: '',\r\n          Content: '',\r\n          FooterEmbeds: '',\r\n          Active: false,\r\n          NavigationTitle: '',\r\n        },\r\n      };\r\n    }\r\n    this.selected = page;\r\n\r\n    /**\r\n     * When selected page is previously existing, check the current value of\r\n     * selected.Doc.DateLastUpdated to determine if the selected item in the\r\n     * list needs to be refreshed. This will also update the selected page so\r\n     * that CmsPageEditor receives the most recent version of the page.\r\n     */\r\n\r\n    if (this.selected.ID) {\r\n      const selectedIndex = this.list.findIndex(\r\n        (d) => d.ID === this.selected.ID\r\n      );\r\n      const selectedPage = await HeadStartSDK.Documents.Get(\r\n        PAGE_SCHEMA.ID,\r\n        this.selected.ID\r\n      );\r\n      if (\r\n        this.selected.Doc.DateLastUpdated !== selectedPage.Doc.DateLastUpdated\r\n      ) {\r\n        this.list[selectedIndex] = selectedPage;\r\n        this.selected = selectedPage;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  display: block;\r\n}\r\n\r\n.main-content {\r\n  height: 100%;\r\n}\r\n\r\n.table-responsive {\r\n  height: calc(100% - 70px);\r\n  border-top: 1px solid #dee2e6;\r\n}\r\n\r\n.table-responsive>.table>thead>tr>th {\r\n  position: sticky;\r\n  top: 0;\r\n  border-top: 0;\r\n  border-bottom: 0;\r\n  background: white;\r\n\r\n  &:after {\r\n    content: ' ';\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    height: 1px;\r\n    background-color: #dee2e6;\r\n  }\r\n}\r\n\r\n.table-responsive>.table>tbody>tr:first-of-type>td {\r\n  border-top: 0;\r\n}\r\n",
                    "styleUrl": "./page-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- LIST VIEW -->\r\n<div *ngIf=\"!selected\" class=\"main-content\">\r\n  <div class=\"d-flex align-items-center justify-content-start p-3\">\r\n    <div class=\"flex-grow-0 flex-shrink-1 pr-2\">\r\n      <button\r\n        type=\"button\"\r\n        (click)=\"selectPage()\"\r\n        class=\"btn btn-outline-primary w-100\"\r\n      >\r\n        New Page\r\n      </button>\r\n    </div>\r\n    <!-- TODO: enable search/filter once it works better -->\r\n    <!-- <div class=\"flex-grow-0 flex-shrink-1 pr-2\">\r\n      <input\r\n        type=\"search\"\r\n        class=\"form-control\"\r\n        [(ngModel)]=\"searchTerm\"\r\n        (ngModelChange)=\"onSearchFieldChange($event)\"\r\n        placeholder=\"Search by title\"\r\n      />\r\n    </div>\r\n    <div class=\"flex-grow-0 flex-shrink-1\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        height=\"24\"\r\n        viewBox=\"0 0 24 24\"\r\n        width=\"24\"\r\n      >\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z\" />\r\n      </svg>\r\n    </div> -->\r\n  </div>\r\n  <div\r\n    class=\"table-responsive\"\r\n    *ngIf=\"!loading && list?.length && !page?.length\"\r\n  >\r\n    <table class=\"table table-hover page-list-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>Title</th>\r\n          <th>Created By</th>\r\n          <th>Date Created</th>\r\n          <th>Last Updated</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let contentDoc of list\" (click)=\"selectPage(contentDoc)\">\r\n          <td>\r\n            <cms-status-icon\r\n              [status]=\"contentDoc.Doc.Active\"\r\n              class=\"mr-1\"\r\n            ></cms-status-icon>\r\n            {{ contentDoc.Doc.Title }}\r\n          </td>\r\n          <td>{{ contentDoc.Doc.Author }}</td>\r\n          <td>{{ contentDoc.Doc.DateCreated | date: \"short\" }}</td>\r\n          <td>\r\n            {{ contentDoc.Doc.DateLastUpdated | date: \"short\" }}\r\n            <span class=\"text-muted small\"\r\n              >by {{ contentDoc.Doc.LastUpdatedBy }}</span\r\n            >\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div *ngIf=\"!loading && !list?.length\">\r\n    <cms-no-results message=\"No pages found\"></cms-no-results>\r\n  </div>\r\n</div>\r\n\r\n<!-- DETAIL VIEW -->\r\n<div class=\"d-flex main-content\" *ngIf=\"selected\">\r\n  <div class=\"flex-shrink-0 flex-grow-0 border-right\">\r\n    <div class=\"d-flex align-items-center justify-content-start p-3\">\r\n      <div class=\"flex-grow-0 flex-shrink-1 pr-2\">\r\n        <button\r\n          type=\"button\"\r\n          (click)=\"selectPage()\"\r\n          class=\"btn btn-outline-primary w-100\"\r\n        >\r\n          New Page\r\n        </button>\r\n      </div>\r\n      <!-- TODO: enable search/filter once it works better -->\r\n      <!-- <div class=\"flex-grow-0 flex-shrink-1 pr-2\">\r\n        <input\r\n          type=\"search\"\r\n          class=\"form-control\"\r\n          [(ngModel)]=\"searchTerm\"\r\n          (ngModelChange)=\"onSearchFieldChange($event)\"\r\n          placeholder=\"Search by title\"\r\n        />\r\n      </div>\r\n      <div class=\"flex-grow-0 flex-shrink-1\">\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          height=\"24\"\r\n          viewBox=\"0 0 24 24\"\r\n          width=\"24\"\r\n        >\r\n          <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n          <path d=\"M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z\" />\r\n        </svg>\r\n      </div> -->\r\n    </div>\r\n    <div class=\"table-responsive\">\r\n      <table class=\"table table-hover\">\r\n        <thead>\r\n          <tr>\r\n            <th>Title</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let page of list\" (click)=\"selectPage(page)\">\r\n            <td>\r\n              <cms-status-icon [status]=\"page.Doc.Active\"></cms-status-icon>\r\n              {{ page.Doc.Title }}<br />\r\n              <small class=\"text-muted\">\r\n                Updated by {{ page.Doc.LastUpdatedBy }} on\r\n                {{ page.Doc.DateLastUpdated | date: \"short\" }}\r\n              </small>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n  <div class=\"flex-grow-1 flex-shrink-1\">\r\n    <cms-page-editor\r\n      (backClicked)=\"goToList($event)\"\r\n      (pageSaved)=\"onPageSaved($event)\"\r\n      (pageDeleted)=\"onPageDeleted($event)\"\r\n      [renderSiteUrl]=\"renderSiteUrl\"\r\n      [editorOptions]=\"editorOptions\"\r\n      [resourceType]=\"resourceType\"\r\n      [resourceID]=\"resourceID\"\r\n      [parentResourceID]=\"parentResourceID\"\r\n      [document]=\"selected\"\r\n    >\r\n    </cms-page-editor>\r\n  </div>\r\n</div>\r\n\r\n<!-- LOADING INDICATOR -->\r\n<ngx-spinner\r\n  type=\"ball-beat\"\r\n  bdColor=\"rgba(255, 255, 255, 0.38)\"\r\n  color=\"#969696\"\r\n  [fullScreen]=\"false\"\r\n></ngx-spinner>\r\n"
        },
        {
            "name": "PagePreviewComponent",
            "id": "component-PagePreviewComponent-30c8bd9998dd76ef3fa385bf19f623f0",
            "file": "projects/lib/src/admin/components/page-preview/page-preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-page-preview",
            "styleUrls": [
                "./page-preview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-preview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "deviceDimensions",
                    "line": 14,
                    "type": "DeviceDimensions"
                },
                {
                    "name": "html",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "initialPreview",
                    "line": 15,
                    "type": "DeviceSize"
                },
                {
                    "name": "remoteCss",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultDeviceDimensions",
                    "defaultValue": "{\n    phone: {\n      height: 667,\n      width: 375,\n    },\n    tablet: {\n      height: 1024,\n      width: 768\n    },\n    desktop: {\n      height: 1080,\n      width: 1920\n    }\n  }",
                    "type": "DeviceDimensions",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "height",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "previewDimensions",
                    "type": "Area",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "selected",
                    "type": "DeviceSize",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "width",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "preview",
                    "args": [
                        {
                            "name": "size",
                            "type": "DeviceSize"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "DeviceSize",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { DeviceDimensions } from '../../models/device-dimensions.interface';\nimport { DeviceSize } from '../../models/device-size.interface';\nimport { Area } from '../../models/area.interface';\n\n@Component({\n  selector: 'cms-page-preview',\n  templateUrl: './page-preview.component.html',\n  styleUrls: ['./page-preview.component.scss']\n})\nexport class PagePreviewComponent implements OnInit {\n  @Input() html: string;\n  @Input() remoteCss?: string; // optional\n  @Input() deviceDimensions?: DeviceDimensions; // optional\n  @Input() initialPreview?: DeviceSize; // optional\n\n  defaultDeviceDimensions: DeviceDimensions = {\n    phone: {\n      height: 667,\n      width: 375,\n    },\n    tablet: {\n      height: 1024,\n      width: 768\n    },\n    desktop: {\n      height: 1080,\n      width: 1920\n    }\n  };\n  height: number;\n  width: number;\n  previewDimensions: Area;\n  selected: DeviceSize;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (!this.deviceDimensions){\n      this.deviceDimensions = {} as DeviceDimensions;\n    }\n    const resolvedDimensions = {} as DeviceDimensions;\n    Object.assign(resolvedDimensions, this.defaultDeviceDimensions, this.deviceDimensions);\n    this.deviceDimensions = resolvedDimensions;\n    this.preview(this.initialPreview || 'phone');\n  }\n\n  preview(size: DeviceSize): void {\n    this.selected = size;\n    this.previewDimensions = this.deviceDimensions[size];\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".devices-toolbar {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 20px 0;\n    span {\n        cursor: pointer;\n        padding: 0 10px;\n        &.selected {\n            border: 3px solid lightblue;\n        }\n    }\n}\n\n.preview {\n    overflow: scroll;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}",
                    "styleUrl": "./page-preview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 34
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"devices-toolbar\">\n  <!-- phone icon -->\n  <span class=\"icon-phone\" (click)=\"preview('phone')\" [ngClass]=\"{ selected: selected === 'phone' }\" ngbTooltip=\"Phone\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path\n        d=\"M16 1H8C6.34 1 5 2.34 5 4v16c0 1.66 1.34 3 3 3h8c1.66 0 3-1.34 3-3V4c0-1.66-1.34-3-3-3zm-2 20h-4v-1h4v1zm3.25-3H6.75V4h10.5v14z\" />\n    </svg>\n  </span>\n\n\n  <!-- tablet icon -->\n  <span class=\"icon-tablet\" (click)=\"preview('tablet')\" [ngClass]=\"{ selected: selected === 'tablet' }\" ngbTooltip=\"Tablet\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" enable-background=\"new 0 0 24 24\" height=\"24\" viewBox=\"0 0 24 24\"\n      width=\"24\">\n      <g>\n        <rect fill=\"none\" height=\"24\" width=\"24\" />\n      </g>\n      <g>\n        <g>\n          <g>\n            <path\n              d=\"M18,0H6C4.34,0,3,1.34,3,3v18c0,1.66,1.34,3,3,3h12c1.66,0,3-1.34,3-3V3C21,1.34,19.66,0,18,0z M14,22h-4v-1h4V22z M19.25,19H4.75V3h14.5V19z\" />\n          </g>\n        </g>\n      </g>\n    </svg>\n  </span>\n\n  <!-- desktop icon -->\n  <span class=\"icon-desktop\" (click)=\"preview('desktop')\" [ngClass]=\"{ selected: selected === 'desktop' }\" ngbTooltip=\"Desktop\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" enable-background=\"new 0 0 24 24\" height=\"24\" viewBox=\"0 0 24 24\"\n      width=\"24\">\n      <g>\n        <rect fill=\"none\" height=\"24\" width=\"24\" x=\"0\" />\n      </g>\n      <g>\n        <g>\n          <g>\n            <path\n              d=\"M20,18c1.1,0,2-0.9,2-2V6c0-1.1-0.9-2-2-2H4C2.9,4,2,4.9,2,6v10c0,1.1,0.9,2,2,2H0v2h24v-2H20z M4,6h16v10H4V6z\" />\n          </g>\n        </g>\n      </g>\n    </svg>\n  </span>\n</div>\n<div class=\"preview\">\n  <cms-page-preview-renderer *ngIf=\"previewDimensions\" [html]=\"html\" [remoteCss]=\"remoteCss\"\n    [height]=\"previewDimensions.height\" [width]=\"previewDimensions.width\"></cms-page-preview-renderer>\n</div>"
        },
        {
            "name": "PagePreviewModalComponent",
            "id": "component-PagePreviewModalComponent-c5e207cdb81d3a2955fb6f878d1cd8f5",
            "file": "projects/lib/src/admin/components/page-preview-modal/page-preview-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-page-preview-modal",
            "styleUrls": [
                "./page-preview-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-preview-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "deviceDimensions",
                    "line": 15,
                    "type": "DeviceDimensions"
                },
                {
                    "name": "html",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "initialPreview",
                    "line": 16,
                    "type": "DeviceSize"
                },
                {
                    "name": "modalTitle",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "remoteCss",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { DeviceDimensions } from '../../models/device-dimensions.interface';\r\nimport { DeviceSize } from '../../models/device-size.interface';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'cms-page-preview-modal',\r\n  templateUrl: './page-preview-modal.component.html',\r\n  styleUrls: ['./page-preview-modal.component.scss']\r\n})\r\nexport class PagePreviewModalComponent implements OnInit {\r\n  @Input() html: string;\r\n  @Input() modalTitle?: string; // optional\r\n  @Input() remoteCss?: string; // optional\r\n  @Input() deviceDimensions?: DeviceDimensions; // optional\r\n  @Input() initialPreview?: DeviceSize; // optional\r\n\r\n  constructor(\r\n    public modal: NgbActiveModal\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-preview-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header\">\r\n  <h4 class=\"modal-title\">{{modalTitle || 'Page Preview'}}</h4>\r\n  <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss()\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n</div>\r\n<div class=\"modal-content\" ngbAutoFocus>\r\n  <div class=\"modal-body\">\r\n    <cms-page-preview [html]=\"html\" [remoteCss]=\"remoteCss\" [deviceDimensions]=\"deviceDimensions\"\r\n      [initialPreview]=\"initialPreview\"></cms-page-preview>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PagePreviewRendererComponent",
            "id": "component-PagePreviewRendererComponent-35abbbd39ef17d83661a9dadf94d3285",
            "file": "projects/lib/src/admin/components/page-preview-renderer/page-preview-renderer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-page-preview-renderer",
            "styleUrls": [
                "./page-preview-renderer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-preview-renderer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "height",
                    "line": 11,
                    "type": "number"
                },
                {
                    "name": "html",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "remoteCss",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "width",
                    "line": 12,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentHeight",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "iframeElement",
                    "type": "ElementRef<HTMLIFrameElement>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'iframe', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "iframeSource",
                    "type": "SafeUrl",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "initIframeSource",
                    "args": [],
                    "optional": false,
                    "returnType": "SafeUrl",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "onIframeLoaded",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, ElementRef, Input } from '@angular/core';\nimport { SafeUrl, DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'cms-page-preview-renderer',\n  templateUrl: './page-preview-renderer.component.html',\n  styleUrls: ['./page-preview-renderer.component.scss']\n})\nexport class PagePreviewRendererComponent implements OnInit {\n  @Input() html: string;\n  @Input() height: number;\n  @Input() width: number;\n  @Input() remoteCss?: string; // optional\n\n  @ViewChild('iframe', { read: ElementRef }) iframeElement: ElementRef<\n    HTMLIFrameElement\n  >;\n  contentHeight: number;\n  iframeSource: SafeUrl;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  ngOnInit(): void {\n    if (!this.height || !this.width) {\n      throw new Error('Missing required parameter for component cms-page-preview-render. Check that html, height, and width are defined.');\n    }\n    if (this.remoteCss) {\n      this.iframeSource = this.initIframeSource();\n    }\n  }\n\n  initIframeSource(): SafeUrl {\n    const documentSource = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <html xmlns=\"http://www.w3.org/1999/xhtml\">\n      <head>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n      ${this.remoteCss ? `<style>@import url('${this.remoteCss}');</style>` : ''}\n      </head>\n      <body style=\"padding-top:0 !important;\">${this.html}</body>\n      </html>`;\n    const blob = new Blob([documentSource], { type: 'application/xhtml+xml' });\n    return this.sanitizer.bypassSecurityTrustResourceUrl(\n      URL.createObjectURL(blob)\n    );\n  }\n\n  onIframeLoaded(): void {\n    if (this.iframeElement) {\n      const iframeDoc = this.iframeElement.nativeElement.contentWindow.document;\n      this.contentHeight = iframeDoc.body.clientHeight;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".iframe {\n    border: none;\n}\n\n.root {\n  &.loading {\n    position: relative;\n  }\n\n  &.loading:after {\n    content: ' ';\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    background-color: rgb(196, 196, 196);\n  }\n}\n",
                    "styleUrl": "./page-preview-renderer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  class=\"root\"\n  [ngClass]=\"{ loading: !contentHeight }\"\n  [ngStyle]=\"{ 'height.px': height }\"\n>\n  <iframe\n    *ngIf=\"iframeSource\"\n    #iframe\n    [src]=\"iframeSource\"\n    frameBorder=\"0\"\n    scrolling=\"no\"\n    [ngStyle]=\"{\n      'height.px': contentHeight,\n      'width.px': width\n    }\"\n    (load)=\"onIframeLoaded()\"\n  ></iframe>\n</div>\n"
        },
        {
            "name": "PageRendererComponent",
            "id": "component-PageRendererComponent-acd662b4eab15dee40efaef83ff74994",
            "file": "projects/lib/src/buyer/components/page-renderer/page-renderer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-page-renderer",
            "styleUrls": [
                "./page-renderer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-renderer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pageDoc",
                    "line": 15,
                    "type": "JDocument"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "createScriptTag",
                    "args": [
                        {
                            "name": "content",
                            "type": "string"
                        },
                        {
                            "name": "appendTo",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appendTo",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadScripts",
                    "args": [
                        {
                            "name": "headerEmbeds",
                            "type": "string"
                        },
                        {
                            "name": "footerEmbeds",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "headerEmbeds",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "footerEmbeds",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "setMetaData",
                    "args": [
                        {
                            "name": "page",
                            "type": "PageContentDoc"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "PageContentDoc",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Renderer2, Inject } from '@angular/core';\r\nimport { WidgetService } from '../../../shared/services/widget.service';\r\nimport { JDocument } from '@ordercloud/headstart-sdk';\r\nimport { Meta, Title } from '@angular/platform-browser';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { PageContentDoc } from '../../../admin/models/page-content-doc.interface';\r\n\r\n/** @dynamic */\r\n@Component({\r\n  selector: 'cms-page-renderer',\r\n  templateUrl: './page-renderer.component.html',\r\n  styleUrls: ['./page-renderer.component.scss'],\r\n})\r\nexport class PageRendererComponent implements OnInit {\r\n  @Input() pageDoc: JDocument;\r\n  content: string;\r\n\r\n  constructor(\r\n    private widgetService: WidgetService,\r\n    private metaService: Meta,\r\n    private titleService: Title,\r\n    private renderer: Renderer2,\r\n    @Inject(DOCUMENT) private document: HTMLDocument\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const page: PageContentDoc = this.pageDoc.Doc;\r\n    this.content = this.widgetService.applyDateRules(page.Content);\r\n    this.setMetaData(page);\r\n    this.loadScripts(page.HeaderEmbeds, page.FooterEmbeds);\r\n  }\r\n\r\n  private setMetaData(page: PageContentDoc): void {\r\n    // addTag results in dupes, so we use updateTag instead\r\n\r\n    // normal metadata\r\n    this.titleService.setTitle(page.Title);\r\n    this.metaService.updateTag({\r\n      property: 'application-name',\r\n      content: page.SiteUrl,\r\n    });\r\n    this.metaService.updateTag({\r\n      property: 'description',\r\n      content: page.Description,\r\n    });\r\n\r\n    // open graph meta data\r\n    this.metaService.updateTag({ property: 'og:type', content: 'website' });\r\n    this.metaService.updateTag({ property: 'og:title', content: page.Title });\r\n    this.metaService.updateTag({\r\n      property: 'og:description',\r\n      content: page.Description,\r\n    });\r\n    this.metaService.updateTag({\r\n      property: 'og:image',\r\n      content: page.MetaImageUrl,\r\n    });\r\n\r\n    // twitter metadata\r\n    this.metaService.updateTag({\r\n      property: 'twitter:card',\r\n      content: 'summary',\r\n    });\r\n    this.metaService.updateTag({\r\n      property: 'twitter:site',\r\n      content: page.SiteUrl,\r\n    });\r\n    this.metaService.updateTag({\r\n      property: 'twitter:title',\r\n      content: page.Title,\r\n    });\r\n    this.metaService.updateTag({\r\n      property: 'twitter:description',\r\n      content: page.Description,\r\n    });\r\n    this.metaService.updateTag({\r\n      property: 'twitter:image',\r\n      content: page.MetaImageUrl,\r\n    });\r\n  }\r\n\r\n  private loadScripts(headerEmbeds: string, footerEmbeds: string): void {\r\n    this.createScriptTag(headerEmbeds, 'head');\r\n    this.createScriptTag(footerEmbeds, 'body');\r\n  }\r\n\r\n  private createScriptTag(content: string, appendTo: string): void {\r\n    // create script\r\n    const script = this.renderer.createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.textContent = content;\r\n\r\n    // append to target element\r\n    const target = this.document.getElementsByTagName(appendTo)[0];\r\n    this.renderer.appendChild(target, script);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-renderer.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 401,
                    "end": 409,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 401,
                        "end": 402,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 402,
                        "end": 409,
                        "flags": 0,
                        "escapedText": "dynamic"
                    }
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "widgetService",
                        "type": "WidgetService"
                    },
                    {
                        "name": "metaService",
                        "type": "Meta"
                    },
                    {
                        "name": "titleService",
                        "type": "Title"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "document",
                        "type": "HTMLDocument"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "widgetService",
                        "type": "WidgetService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metaService",
                        "type": "Meta",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "HTMLDocument",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [innerHtml]=\"content | safeHtml\"></div>"
        },
        {
            "name": "PageSummaryComponent",
            "id": "component-PageSummaryComponent-d2b85a330531aa63290dca9af329e79e",
            "file": "projects/lib/src/admin/components/page-summary/page-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-page-summary",
            "styleUrls": [
                "./page-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "document",
                    "line": 10,
                    "type": "JDocument"
                },
                {
                    "name": "renderSiteUrl",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { JDocument } from '@ordercloud/headstart-sdk';\r\n\r\n@Component({\r\n  selector: 'cms-page-summary',\r\n  templateUrl: './page-summary.component.html',\r\n  styleUrls: ['./page-summary.component.scss'],\r\n})\r\nexport class PageSummaryComponent {\r\n  @Input() document: JDocument;\r\n  @Input() renderSiteUrl: string;\r\n  constructor() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#pageSummary {\r\n  th {\r\n    white-space: nowrap;\r\n    font-weight: normal;\r\n    width: 1%;\r\n  }\r\n}\r\n",
                    "styleUrl": "./page-summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "templateData": "<label for=\"pageSummary\">Summary</label>\r\n\r\n<div class=\"bg-light p-3 rounded border\" id=\"pageSummary\">\r\n  <p class=\"lead text-center m-0\" *ngIf=\"!document.ID\">\r\n    Save changes to see page summary\r\n  </p>\r\n  <table class=\"table table-sm table-borderless mb-0\" *ngIf=\"document.ID\">\r\n    <tbody>\r\n      <tr>\r\n        <th scope=\"row\" class=\"text-muted\">Status</th>\r\n        <td>\r\n          <cms-status-icon\r\n            [status]=\"document.Doc.Active\"\r\n            [inline]=\"true\"\r\n          ></cms-status-icon>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <th scope=\"row\" class=\"text-muted\">Created By</th>\r\n        <td>{{ document.Doc.Author }}</td>\r\n      </tr>\r\n      <tr>\r\n        <th scope=\"row\" class=\"text-muted\">Date Created</th>\r\n        <td>\r\n          {{ document.Doc.DateCreated | date: \"MMMM d, yyyy 'at' h:mm a\" }}\r\n        </td>\r\n      </tr>\r\n      <tr *ngIf=\"document.Doc.DateLastUpdated !== document.Doc.DateCreated\">\r\n        <th scope=\"row\" class=\"text-muted\">Updated By</th>\r\n        <td>{{ document.Doc.LastUpdatedBy }}</td>\r\n      </tr>\r\n      <tr *ngIf=\"document.Doc.DateLastUpdated !== document.Doc.DateCreated\">\r\n        <th scope=\"row\" class=\"text-muted\">Date Updated</th>\r\n        <td>\r\n          {{ document.Doc.DateLastUpdated | date: \"MMMM d, yyyy 'at' h:mm a\" }}\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <a\r\n    *ngIf=\"renderSiteUrl && document.Doc.Active\"\r\n    [href]=\"renderSiteUrl + '/' + document.Doc.Url\"\r\n    target=\"_blank\"\r\n    class=\"btn btn-outline-secondary btn-block mt-3\"\r\n  >\r\n    View Live Page\r\n  </a>\r\n</div>\r\n"
        },
        {
            "name": "SectionDateSettingsComponent",
            "id": "component-SectionDateSettingsComponent-c7b4bab0961cd9d9dff6adef2b53729f",
            "file": "projects/lib/src/admin/components/section-date-settings/section-date-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-section-date-settings",
            "styleUrls": [
                "./section-date-settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./section-date-settings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 10,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "endDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "startDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, NgZone, Input } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'cms-section-date-settings',\r\n  templateUrl: './section-date-settings.component.html',\r\n  styleUrls: ['./section-date-settings.component.scss']\r\n})\r\nexport class SectionDateSettingsComponent implements OnInit {\r\n  @Input() data: any;\r\n  startDate: string;\r\n  endDate: string;\r\n  constructor(public modal: NgbActiveModal) {}\r\n\r\n  ngOnInit(): void {\r\n    this.startDate = this.data.startDate;\r\n    this.endDate = this.data.endDate;\r\n  }\r\n\r\n  submit(): void {\r\n    this.modal.close({ startDate: this.startDate, endDate: this.endDate });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./section-date-settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header\">\r\n  <h4 class=\"modal-title\">Date Settings</h4>\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss('Cross click')\"\r\n  >\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-6\">\r\n      <div class=\"form-group\">\r\n        <label for=\"startDate\">Show Date</label>\r\n        <input\r\n          id=\"startDate\"\r\n          type=\"date\"\r\n          class=\"form-control\"\r\n          [(ngModel)]=\"startDate\"\r\n          aria-describedby=\"startDateHelp\"\r\n        />\r\n        <small id=\"startDateHelp\" class=\"form-text text-muted\">\r\n          This section will not appear until this date. If left blank, the\r\n          section will be visible by default.\r\n        </small>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-6\">\r\n      <div class=\"form-group\">\r\n        <label for=\"endDate\">Hide Date</label>\r\n        <input\r\n          id=\"endDate\"\r\n          type=\"date\"\r\n          class=\"form-control\"\r\n          [(ngModel)]=\"endDate\"\r\n          aria-describedby=\"endDateHelp\"\r\n        />\r\n        <small id=\"endDateHelp\" class=\"form-text text-muted\">\r\n          This section will hide starting on this date. If left blank, the\r\n          section will remain visible by default.\r\n        </small>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"submit()\">\r\n    Save Changes\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "SectionPickerComponent",
            "id": "component-SectionPickerComponent-1335575881d18e092ab98d00dc6ebac8",
            "file": "projects/lib/src/admin/components/section-picker/section-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-section-picker",
            "styleUrls": [
                "./section-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./section-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 20,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "debounceTimeout",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "listElement",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'list', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previewTransformRatio",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "previewWidth",
                    "defaultValue": "1024",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "sectionTemplates",
                    "defaultValue": "sectionPickerMock",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "selectedTemplateIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "zone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "determineTransformRatio",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "handleSelectTemplate",
                    "args": [
                        {
                            "name": "index",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  NgZone,\r\n  Input,\r\n  ViewChild,\r\n  ElementRef,\r\n  AfterViewChecked,\r\n} from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport sectionPickerMock from './section-picker.mock';\r\n\r\n@Component({\r\n  selector: 'cms-section-picker',\r\n  templateUrl: './section-picker.component.html',\r\n  styleUrls: ['./section-picker.component.scss'],\r\n})\r\nexport class SectionPickerComponent implements AfterViewChecked {\r\n  @ViewChild('list', { read: ElementRef })\r\n  listElement: ElementRef<HTMLDivElement>;\r\n  @Input() data: any;\r\n  sectionTemplates = sectionPickerMock;\r\n  selectedTemplateIndex: number;\r\n  previewWidth = 1024;\r\n  previewTransformRatio = 1;\r\n  debounceTimeout: any;\r\n  constructor(public modal: NgbActiveModal, public zone: NgZone) {}\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this.debounceTimeout) {\r\n      clearTimeout(this.debounceTimeout);\r\n    }\r\n\r\n    // TODO: this seems like it's getting hit way more than it should.\r\n\r\n    this.debounceTimeout = setTimeout(() => {\r\n      const transformRatio = this.determineTransformRatio();\r\n      if (this.previewTransformRatio !== transformRatio) {\r\n        this.previewTransformRatio = transformRatio;\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  determineTransformRatio() {\r\n    if (this.listElement && this.listElement.nativeElement) {\r\n      return this.listElement.nativeElement.clientWidth / this.previewWidth;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  handleSelectTemplate(index) {\r\n    this.selectedTemplateIndex = index;\r\n  }\r\n\r\n  submit() {\r\n    this.modal.close(this.sectionTemplates[this.selectedTemplateIndex]);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".section-picker_container {\r\n  background: #f2f2f2;\r\n}\r\n\r\n.section-picker_list {\r\n  width: 100%;\r\n  overflow: hidden;\r\n}\r\n",
                    "styleUrl": "./section-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewChecked"
            ],
            "templateData": "<div class=\"modal-header\">\r\n  <h4 class=\"modal-title\">Section Template Library</h4>\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss('Cross click')\"\r\n  >\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n</div>\r\n<div class=\"modal-body py-0\">\r\n  <div class=\"row\">\r\n    <div class=\"col-sm-3\"></div>\r\n    <div class=\"col-sm-9 section-picker_container py-3\">\r\n      <div #list class=\"section-picker_list\">\r\n        <div *ngFor=\"let template of sectionTemplates; index as i\">\r\n          <cms-section-template-renderer\r\n            [html]=\"template\"\r\n            [selected]=\"i === selectedTemplateIndex\"\r\n            (click)=\"handleSelectTemplate(i)\"\r\n            [previewWidth]=\"previewWidth\"\r\n            [previewTransformRatio]=\"previewTransformRatio\"\r\n            [remoteCss]=\"data.remoteCss\"\r\n          ></cms-section-template-renderer>\r\n\r\n          <hr *ngIf=\"i < sectionTemplates.length - 1\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"submit()\">\r\n    Add Section\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "SectionTemplateRendererComponent",
            "id": "component-SectionTemplateRendererComponent-0d46727f372abb13e01a18a75a06c4c2",
            "file": "projects/lib/src/admin/components/section-template-renderer/section-template-renderer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-section-template-renderer",
            "styleUrls": [
                "./section-template-renderer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./section-template-renderer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "html",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "previewTransformRatio",
                    "line": 25,
                    "type": "number"
                },
                {
                    "name": "previewWidth",
                    "line": 24,
                    "type": "number"
                },
                {
                    "name": "remoteCss",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "selected",
                    "line": 19,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "height",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "iframeElement",
                    "type": "ElementRef<HTMLIFrameElement>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'iframe', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "iframeSource",
                    "type": "SafeUrl",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "rootHeight",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "transform",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "checkPreviewTransformRatio",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkRemoteCss",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initIframeSource",
                    "args": [],
                    "optional": false,
                    "returnType": "SafeUrl",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "onIframeLoaded",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  ViewChild,\r\n  ElementRef,\r\n  OnInit,\r\n  SimpleChanges,\r\n  OnChanges\r\n} from '@angular/core';\r\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'cms-section-template-renderer',\r\n  templateUrl: './section-template-renderer.component.html',\r\n  styleUrls: ['./section-template-renderer.component.scss']\r\n})\r\nexport class SectionTemplateRendererComponent implements OnInit, OnChanges {\r\n  @Input() html: string;\r\n  @Input() selected: boolean;\r\n  @Input() remoteCss: string;\r\n  @ViewChild('iframe', { read: ElementRef }) iframeElement: ElementRef<\r\n    HTMLIFrameElement\r\n  >;\r\n  @Input() previewWidth: number;\r\n  @Input() previewTransformRatio: number;\r\n  iframeSource: SafeUrl;\r\n  height: number;\r\n  rootHeight: number;\r\n  transform: string;\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n\r\n  ngOnInit() {\r\n    if (this.remoteCss) {\r\n      this.iframeSource = this.initIframeSource();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.checkPreviewTransformRatio(changes);\r\n    this.checkRemoteCss(changes);\r\n  }\r\n\r\n  checkPreviewTransformRatio(changes: SimpleChanges) {\r\n    if (\r\n      (changes.previewTransformRatio &&\r\n        changes.previewTransformRatio.currentValue !==\r\n          changes.previewTransformRatio.previousValue) ||\r\n      (changes.height &&\r\n        changes.height.currentValue !== changes.height.previousValue)\r\n    ) {\r\n      this.transform = `scale(${this.previewTransformRatio})`;\r\n      this.rootHeight = this.previewTransformRatio * (this.height + 4);\r\n    }\r\n  }\r\n\r\n  checkRemoteCss(changes: SimpleChanges) {\r\n    if (\r\n      changes.remoteCss &&\r\n      !changes.remoteCss.firstChange &&\r\n      changes.remoteCss.currentValue !== changes.remoteCss.previousValue\r\n    ) {\r\n      this.iframeSource = this.initIframeSource();\r\n    }\r\n  }\r\n\r\n  initIframeSource(): SafeUrl {\r\n    const documentSource = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n      <html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n      <head>\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\r\n      <style>@import url('${this.remoteCss}');</style>\r\n      </head>\r\n      <body style=\"padding-top:0 !important;\">${this.html}</body>\r\n      </html>`;\r\n    const blob = new Blob([documentSource], { type: 'application/xhtml+xml' });\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(\r\n      URL.createObjectURL(blob)\r\n    );\r\n  }\r\n\r\n  onIframeLoaded() {\r\n    if (this.iframeElement) {\r\n      const iframeDoc = this.iframeElement.nativeElement.contentWindow.document;\r\n      this.height = iframeDoc.body.clientHeight;\r\n      this.rootHeight = (this.height + 4) * this.previewTransformRatio;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".section-template-renderer_iframe {\r\n  border: none;\r\n  transform-origin: left top;\r\n  pointer-events: none;\r\n}\r\n\r\n.section-template-renderer_root {\r\n  border: 2px solid rgb(196, 196, 196);\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  margin-bottom: 15px;\r\n  cursor: pointer;\r\n\r\n  &.loading {\r\n    position: relative;\r\n  }\r\n\r\n  &.loading:after {\r\n    content: ' ';\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    background-color: rgb(196, 196, 196);\r\n  }\r\n\r\n  &.selected {\r\n    border-color: blue;\r\n  }\r\n}\r\n",
                    "styleUrl": "./section-template-renderer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div\r\n  #root\r\n  class=\"section-template-renderer_root\"\r\n  [ngClass]=\"{ selected: selected, loading: !rootHeight }\"\r\n  [ngStyle]=\"{ 'height.px': rootHeight }\"\r\n>\r\n  <iframe\r\n    *ngIf=\"iframeSource\"\r\n    #iframe\r\n    class=\"section-template-renderer_iframe\"\r\n    [ngStyle]=\"{\r\n      'height.px': height,\r\n      'width.px': previewWidth,\r\n      transform: transform\r\n    }\"\r\n    [src]=\"iframeSource\"\r\n    scrolling=\"no\"\r\n    (load)=\"onIframeLoaded()\"\r\n  ></iframe>\r\n</div>\r\n"
        },
        {
            "name": "StatusIconComponent",
            "id": "component-StatusIconComponent-ecb44a8b5047f0d83c9bafef1954530b",
            "file": "projects/lib/src/admin/components/status-icon/status-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-status-icon",
            "styleUrls": [
                "./status-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./status-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "inline",
                    "defaultValue": "false",
                    "line": 17
                },
                {
                    "name": "status",
                    "defaultValue": "false",
                    "line": 16
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  SimpleChanges,\r\n  OnChanges,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'cms-status-icon',\r\n  templateUrl: './status-icon.component.html',\r\n  styleUrls: ['./status-icon.component.scss'],\r\n})\r\nexport class StatusIconComponent implements OnInit, OnChanges {\r\n  color: string;\r\n  @Input() status = false;\r\n  @Input() inline = false;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.color = this.status ? '#70D97A' : '#dc3545';\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.\r\n    // Add '${implements OnChanges}' to the class.\r\n    if (\r\n      changes.status &&\r\n      !changes.status.firstChange &&\r\n      changes.status.previousValue !== changes.status.currentValue\r\n    ) {\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./status-icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<svg\r\n  [ngbTooltip]=\"status ? 'Live' : 'Disabled'\"\r\n  [disableTooltip]=\"inline\"\r\n  id=\"CMS_PAGE_STATUS\"\r\n  aria-describedby=\"CMS_PAGE_STATUS_LABEL\"\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  [attr.fill]=\"color\"\r\n  height=\"24\"\r\n  viewBox=\"0 0 24 24\"\r\n  width=\"16\"\r\n>\r\n  <circle cx=\"12\" cy=\"10\" r=\"8\" />\r\n</svg>\r\n\r\n<span role=\"label\" id=\"CMS_PAGE_STATUS_LABEL\" class=\"ml-1\" *ngIf=\"inline\">{{\r\n  status ? \"Live\" : \"Disabled\"\r\n}}</span>\r\n"
        }
    ],
    "modules": [
        {
            "name": "CmsAdminModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AssetListComponent"
                        },
                        {
                            "name": "AssetPickerComponent"
                        },
                        {
                            "name": "AssetSearchComponent"
                        },
                        {
                            "name": "AssetUpdateComponent"
                        },
                        {
                            "name": "AssetUploadComponent"
                        },
                        {
                            "name": "CarouselEditorComponent"
                        },
                        {
                            "name": "ConfirmModalComponent"
                        },
                        {
                            "name": "DragAndDropDirective"
                        },
                        {
                            "name": "HtmlEditorComponent"
                        },
                        {
                            "name": "PageEditorComponent"
                        },
                        {
                            "name": "PageListComponent"
                        },
                        {
                            "name": "PagePreviewComponent"
                        },
                        {
                            "name": "PagePreviewModalComponent"
                        },
                        {
                            "name": "PagePreviewRendererComponent"
                        },
                        {
                            "name": "PageSummaryComponent"
                        },
                        {
                            "name": "SectionDateSettingsComponent"
                        },
                        {
                            "name": "SectionPickerComponent"
                        },
                        {
                            "name": "SectionTemplateRendererComponent"
                        },
                        {
                            "name": "StatusIconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CmsBuyerModule"
                        },
                        {
                            "name": "CmsSharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AssetListComponent"
                        },
                        {
                            "name": "AssetPickerComponent"
                        },
                        {
                            "name": "AssetSearchComponent"
                        },
                        {
                            "name": "AssetUpdateComponent"
                        },
                        {
                            "name": "AssetUploadComponent"
                        },
                        {
                            "name": "CarouselEditorComponent"
                        },
                        {
                            "name": "ConfirmModalComponent"
                        },
                        {
                            "name": "DragAndDropDirective"
                        },
                        {
                            "name": "HtmlEditorComponent"
                        },
                        {
                            "name": "PageEditorComponent"
                        },
                        {
                            "name": "PageListComponent"
                        },
                        {
                            "name": "PagePreviewComponent"
                        },
                        {
                            "name": "PagePreviewModalComponent"
                        },
                        {
                            "name": "PagePreviewRendererComponent"
                        },
                        {
                            "name": "PageSummaryComponent"
                        },
                        {
                            "name": "SectionDateSettingsComponent"
                        },
                        {
                            "name": "SectionPickerComponent"
                        },
                        {
                            "name": "SectionTemplateRendererComponent"
                        },
                        {
                            "name": "StatusIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CmsBuyerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PageRendererComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CmsSharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AssetListComponent"
                        },
                        {
                            "name": "AssetPickerComponent"
                        },
                        {
                            "name": "AssetSearchComponent"
                        },
                        {
                            "name": "AssetUpdateComponent"
                        },
                        {
                            "name": "AssetUploadComponent"
                        },
                        {
                            "name": "CarouselEditorComponent"
                        },
                        {
                            "name": "ConfirmModalComponent"
                        },
                        {
                            "name": "DragAndDropDirective"
                        },
                        {
                            "name": "HtmlEditorComponent"
                        },
                        {
                            "name": "PageEditorComponent"
                        },
                        {
                            "name": "PageListComponent"
                        },
                        {
                            "name": "PagePreviewComponent"
                        },
                        {
                            "name": "PagePreviewModalComponent"
                        },
                        {
                            "name": "PagePreviewRendererComponent"
                        },
                        {
                            "name": "PageSummaryComponent"
                        },
                        {
                            "name": "SectionDateSettingsComponent"
                        },
                        {
                            "name": "SectionPickerComponent"
                        },
                        {
                            "name": "SectionTemplateRendererComponent"
                        },
                        {
                            "name": "StatusIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CmsSharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NoResultsComponent"
                        },
                        {
                            "name": "SafeHtmlPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NoResultsComponent"
                        },
                        {
                            "name": "SafeHtmlPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ASSET_TYPE_ATTACHMENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                "type": "string",
                "defaultValue": "'Attachment'"
            },
            {
                "name": "ASSET_TYPE_IMAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                "type": "string",
                "defaultValue": "'Image'"
            },
            {
                "name": "ASSET_TYPE_STRUCTURED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                "type": "string",
                "defaultValue": "'Structured'"
            },
            {
                "name": "ASSET_TYPE_THEME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                "type": "string",
                "defaultValue": "'Theme'"
            },
            {
                "name": "declarations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/admin/admin.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n  AssetSearchComponent,\r\n  HtmlEditorComponent,\r\n  PageEditorComponent,\r\n  AssetPickerComponent,\r\n  CarouselEditorComponent,\r\n  ConfirmModalComponent,\r\n  SectionPickerComponent,\r\n  SectionDateSettingsComponent,\r\n  AssetListComponent,\r\n  AssetUpdateComponent,\r\n  AssetUploadComponent,\r\n  DragAndDropDirective,\r\n  PageListComponent,\r\n  StatusIconComponent,\r\n  SectionTemplateRendererComponent,\r\n  PageSummaryComponent,\r\n  PagePreviewComponent,\r\n  PagePreviewRendererComponent,\r\n  PagePreviewModalComponent\r\n]"
            },
            {
                "name": "declarations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/buyer/buyer.module.ts",
                "type": "[]",
                "defaultValue": "[PageRendererComponent]"
            },
            {
                "name": "EMPTY_PAGE_CONTENT_DOC",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/admin/components/page-editor/page-editor.component.ts",
                "type": "Partial<PageContentDoc>",
                "defaultValue": "{\r\n  Title: '',\r\n  Url: '',\r\n  Description: '',\r\n  HeaderEmbeds: '',\r\n  Content: ``,\r\n  FooterEmbeds: '',\r\n  Active: false,\r\n  NavigationTitle: '',\r\n}"
            },
            {
                "name": "OC_TINYMCE_COL_WIDGET_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/shared/constants/widget.constants.ts",
                "type": "string",
                "defaultValue": "'oc-col'"
            },
            {
                "name": "OC_TINYMCE_END_DATE_ATTRIBUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/shared/constants/widget.constants.ts",
                "type": "string",
                "defaultValue": "'data-oc-end-date'"
            },
            {
                "name": "OC_TINYMCE_PRODUCT_WIDGET_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/shared/constants/widget.constants.ts",
                "type": "string",
                "defaultValue": "'oc-product'"
            },
            {
                "name": "OC_TINYMCE_ROW_WIDGET_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/shared/constants/widget.constants.ts",
                "type": "string",
                "defaultValue": "'oc-row'"
            },
            {
                "name": "OC_TINYMCE_SECTION_WIDGET_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/shared/constants/widget.constants.ts",
                "type": "string",
                "defaultValue": "'oc-section'"
            },
            {
                "name": "OC_TINYMCE_START_DATE_ATTRIBUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/shared/constants/widget.constants.ts",
                "type": "string",
                "defaultValue": "'data-oc-start-date'"
            },
            {
                "name": "OC_TINYMCE_WIDGET_ATTRIBUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/shared/constants/widget.constants.ts",
                "type": "string",
                "defaultValue": "'data-oc-widget'"
            },
            {
                "name": "PAGE_SCHEMA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lib/src/admin/constants/page-schema.constants.ts",
                "type": "object",
                "defaultValue": "{\r\n  ID: 'cms-page-schema',\r\n  RestrictedAssignmentTypes: [],\r\n  Schema: {\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n    title: 'OrderCloud CMS Page Schema',\r\n    type: 'object',\r\n    properties: {\r\n      Title: {\r\n        type: 'string',\r\n      },\r\n      Url: {\r\n        type: 'string',\r\n      },\r\n      SiteUrl: {\r\n        type: 'string',\r\n      },\r\n      Description: {\r\n        type: 'string',\r\n      },\r\n      MetaImageUrl: {\r\n        type: 'string',\r\n      },\r\n      DateCreated: {\r\n        type: 'string',\r\n      },\r\n      Author: {\r\n        type: 'string',\r\n      },\r\n      DateLastUpdated: {\r\n        type: 'string',\r\n      },\r\n      LastUpdatedBy: {\r\n        type: 'string',\r\n      },\r\n      HeaderEmbeds: {\r\n        type: 'string',\r\n      },\r\n      Content: {\r\n        type: 'string',\r\n      },\r\n      FooterEmbeds: {\r\n        type: 'string',\r\n      },\r\n      Active: {\r\n        type: 'boolean',\r\n      },\r\n      NavigationTitle: {\r\n        type: 'string',\r\n      },\r\n    },\r\n  },\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ASSET_TYPE_ATTACHMENT",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                "description": "",
                "kind": 164
            },
            {
                "name": "ASSET_TYPE_IMAGE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                "description": "",
                "kind": 164
            },
            {
                "name": "ASSET_TYPE_STRUCTURED",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                "description": "",
                "kind": 164
            },
            {
                "name": "ASSET_TYPE_THEME",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                "description": "",
                "kind": 164
            },
            {
                "name": "AssetType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ASSET_TYPE_IMAGE | ASSET_TYPE_THEME | ASSET_TYPE_ATTACHMENT | ASSET_TYPE_STRUCTURED",
                "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "DeviceSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"phone\" | \"tablet\" | \"desktop\"",
                "file": "projects/lib/src/admin/models/device-size.interface.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "ResourceType",
                "childs": [
                    {
                        "name": "Catalogs",
                        "value": "Catalogs"
                    },
                    {
                        "name": "Categories",
                        "value": "Categories"
                    },
                    {
                        "name": "Products",
                        "value": "Products"
                    },
                    {
                        "name": "PriceSchedules",
                        "value": "PriceSchedules"
                    },
                    {
                        "name": "ProductFacets",
                        "value": "ProductFacets"
                    },
                    {
                        "name": "Specs",
                        "value": "Specs"
                    },
                    {
                        "name": "SecurityProfiles",
                        "value": "SecurityProfiles"
                    },
                    {
                        "name": "PasswordResets",
                        "value": "PasswordResets"
                    },
                    {
                        "name": "OpenIdConnects",
                        "value": "OpenIdConnects"
                    },
                    {
                        "name": "ImpersonationConfigs",
                        "value": "ImpersonationConfigs"
                    },
                    {
                        "name": "Buyers",
                        "value": "Buyers"
                    },
                    {
                        "name": "Users",
                        "value": "Users"
                    },
                    {
                        "name": "UserGroups",
                        "value": "UserGroups"
                    },
                    {
                        "name": "Addresses",
                        "value": "Addresses"
                    },
                    {
                        "name": "CostCenters",
                        "value": "CostCenters"
                    },
                    {
                        "name": "CreditCards",
                        "value": "CreditCards"
                    },
                    {
                        "name": "SpendingAccounts",
                        "value": "SpendingAccounts"
                    },
                    {
                        "name": "SupplierUsers",
                        "value": "SupplierUsers"
                    },
                    {
                        "name": "SupplierUserGroups",
                        "value": "SupplierUserGroups"
                    },
                    {
                        "name": "SupplierAddresses",
                        "value": "SupplierAddresses"
                    },
                    {
                        "name": "Promotions",
                        "value": "ApproPromotionsvalRules"
                    },
                    {
                        "name": "AdminUsers",
                        "value": "AdminUsers"
                    },
                    {
                        "name": "AdminAddresses",
                        "value": "AdminAddresses"
                    },
                    {
                        "name": "AdminUserGroups",
                        "value": "AdminUserGroups"
                    },
                    {
                        "name": "MessageSenders",
                        "value": "MessageSenders"
                    },
                    {
                        "name": "Webhooks",
                        "value": "Webhooks"
                    },
                    {
                        "name": "ApiClients",
                        "value": "ApiClients"
                    },
                    {
                        "name": "Incrementors",
                        "value": "Incrementors"
                    },
                    {
                        "name": "IntegrationEvents",
                        "value": "IntegrationEvents"
                    },
                    {
                        "name": "XpIndices",
                        "value": "XpIndices"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/lib/src/shared/models/resource-type.interface.ts"
            }
        ],
        "groupedVariables": {
            "projects/lib/src/admin/components/asset-list/asset-list.component.ts": [
                {
                    "name": "ASSET_TYPE_ATTACHMENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                    "type": "string",
                    "defaultValue": "'Attachment'"
                },
                {
                    "name": "ASSET_TYPE_IMAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                    "type": "string",
                    "defaultValue": "'Image'"
                },
                {
                    "name": "ASSET_TYPE_STRUCTURED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                    "type": "string",
                    "defaultValue": "'Structured'"
                },
                {
                    "name": "ASSET_TYPE_THEME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                    "type": "string",
                    "defaultValue": "'Theme'"
                }
            ],
            "projects/lib/src/admin/admin.module.ts": [
                {
                    "name": "declarations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/admin/admin.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  AssetSearchComponent,\r\n  HtmlEditorComponent,\r\n  PageEditorComponent,\r\n  AssetPickerComponent,\r\n  CarouselEditorComponent,\r\n  ConfirmModalComponent,\r\n  SectionPickerComponent,\r\n  SectionDateSettingsComponent,\r\n  AssetListComponent,\r\n  AssetUpdateComponent,\r\n  AssetUploadComponent,\r\n  DragAndDropDirective,\r\n  PageListComponent,\r\n  StatusIconComponent,\r\n  SectionTemplateRendererComponent,\r\n  PageSummaryComponent,\r\n  PagePreviewComponent,\r\n  PagePreviewRendererComponent,\r\n  PagePreviewModalComponent\r\n]"
                }
            ],
            "projects/lib/src/buyer/buyer.module.ts": [
                {
                    "name": "declarations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/buyer/buyer.module.ts",
                    "type": "[]",
                    "defaultValue": "[PageRendererComponent]"
                }
            ],
            "projects/lib/src/admin/components/page-editor/page-editor.component.ts": [
                {
                    "name": "EMPTY_PAGE_CONTENT_DOC",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/admin/components/page-editor/page-editor.component.ts",
                    "type": "Partial<PageContentDoc>",
                    "defaultValue": "{\r\n  Title: '',\r\n  Url: '',\r\n  Description: '',\r\n  HeaderEmbeds: '',\r\n  Content: ``,\r\n  FooterEmbeds: '',\r\n  Active: false,\r\n  NavigationTitle: '',\r\n}"
                }
            ],
            "projects/lib/src/shared/constants/widget.constants.ts": [
                {
                    "name": "OC_TINYMCE_COL_WIDGET_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/shared/constants/widget.constants.ts",
                    "type": "string",
                    "defaultValue": "'oc-col'"
                },
                {
                    "name": "OC_TINYMCE_END_DATE_ATTRIBUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/shared/constants/widget.constants.ts",
                    "type": "string",
                    "defaultValue": "'data-oc-end-date'"
                },
                {
                    "name": "OC_TINYMCE_PRODUCT_WIDGET_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/shared/constants/widget.constants.ts",
                    "type": "string",
                    "defaultValue": "'oc-product'"
                },
                {
                    "name": "OC_TINYMCE_ROW_WIDGET_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/shared/constants/widget.constants.ts",
                    "type": "string",
                    "defaultValue": "'oc-row'"
                },
                {
                    "name": "OC_TINYMCE_SECTION_WIDGET_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/shared/constants/widget.constants.ts",
                    "type": "string",
                    "defaultValue": "'oc-section'"
                },
                {
                    "name": "OC_TINYMCE_START_DATE_ATTRIBUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/shared/constants/widget.constants.ts",
                    "type": "string",
                    "defaultValue": "'data-oc-start-date'"
                },
                {
                    "name": "OC_TINYMCE_WIDGET_ATTRIBUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/shared/constants/widget.constants.ts",
                    "type": "string",
                    "defaultValue": "'data-oc-widget'"
                }
            ],
            "projects/lib/src/admin/constants/page-schema.constants.ts": [
                {
                    "name": "PAGE_SCHEMA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lib/src/admin/constants/page-schema.constants.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  ID: 'cms-page-schema',\r\n  RestrictedAssignmentTypes: [],\r\n  Schema: {\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n    title: 'OrderCloud CMS Page Schema',\r\n    type: 'object',\r\n    properties: {\r\n      Title: {\r\n        type: 'string',\r\n      },\r\n      Url: {\r\n        type: 'string',\r\n      },\r\n      SiteUrl: {\r\n        type: 'string',\r\n      },\r\n      Description: {\r\n        type: 'string',\r\n      },\r\n      MetaImageUrl: {\r\n        type: 'string',\r\n      },\r\n      DateCreated: {\r\n        type: 'string',\r\n      },\r\n      Author: {\r\n        type: 'string',\r\n      },\r\n      DateLastUpdated: {\r\n        type: 'string',\r\n      },\r\n      LastUpdatedBy: {\r\n        type: 'string',\r\n      },\r\n      HeaderEmbeds: {\r\n        type: 'string',\r\n      },\r\n      Content: {\r\n        type: 'string',\r\n      },\r\n      FooterEmbeds: {\r\n        type: 'string',\r\n      },\r\n      Active: {\r\n        type: 'boolean',\r\n      },\r\n      NavigationTitle: {\r\n        type: 'string',\r\n      },\r\n    },\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/lib/src/shared/models/resource-type.interface.ts": [
                {
                    "name": "ResourceType",
                    "childs": [
                        {
                            "name": "Catalogs",
                            "value": "Catalogs"
                        },
                        {
                            "name": "Categories",
                            "value": "Categories"
                        },
                        {
                            "name": "Products",
                            "value": "Products"
                        },
                        {
                            "name": "PriceSchedules",
                            "value": "PriceSchedules"
                        },
                        {
                            "name": "ProductFacets",
                            "value": "ProductFacets"
                        },
                        {
                            "name": "Specs",
                            "value": "Specs"
                        },
                        {
                            "name": "SecurityProfiles",
                            "value": "SecurityProfiles"
                        },
                        {
                            "name": "PasswordResets",
                            "value": "PasswordResets"
                        },
                        {
                            "name": "OpenIdConnects",
                            "value": "OpenIdConnects"
                        },
                        {
                            "name": "ImpersonationConfigs",
                            "value": "ImpersonationConfigs"
                        },
                        {
                            "name": "Buyers",
                            "value": "Buyers"
                        },
                        {
                            "name": "Users",
                            "value": "Users"
                        },
                        {
                            "name": "UserGroups",
                            "value": "UserGroups"
                        },
                        {
                            "name": "Addresses",
                            "value": "Addresses"
                        },
                        {
                            "name": "CostCenters",
                            "value": "CostCenters"
                        },
                        {
                            "name": "CreditCards",
                            "value": "CreditCards"
                        },
                        {
                            "name": "SpendingAccounts",
                            "value": "SpendingAccounts"
                        },
                        {
                            "name": "SupplierUsers",
                            "value": "SupplierUsers"
                        },
                        {
                            "name": "SupplierUserGroups",
                            "value": "SupplierUserGroups"
                        },
                        {
                            "name": "SupplierAddresses",
                            "value": "SupplierAddresses"
                        },
                        {
                            "name": "Promotions",
                            "value": "ApproPromotionsvalRules"
                        },
                        {
                            "name": "AdminUsers",
                            "value": "AdminUsers"
                        },
                        {
                            "name": "AdminAddresses",
                            "value": "AdminAddresses"
                        },
                        {
                            "name": "AdminUserGroups",
                            "value": "AdminUserGroups"
                        },
                        {
                            "name": "MessageSenders",
                            "value": "MessageSenders"
                        },
                        {
                            "name": "Webhooks",
                            "value": "Webhooks"
                        },
                        {
                            "name": "ApiClients",
                            "value": "ApiClients"
                        },
                        {
                            "name": "Incrementors",
                            "value": "Incrementors"
                        },
                        {
                            "name": "IntegrationEvents",
                            "value": "IntegrationEvents"
                        },
                        {
                            "name": "XpIndices",
                            "value": "XpIndices"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/lib/src/shared/models/resource-type.interface.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/lib/src/admin/components/asset-list/asset-list.component.ts": [
                {
                    "name": "ASSET_TYPE_ATTACHMENT",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                    "description": "",
                    "kind": 164
                },
                {
                    "name": "ASSET_TYPE_IMAGE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                    "description": "",
                    "kind": 164
                },
                {
                    "name": "ASSET_TYPE_STRUCTURED",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                    "description": "",
                    "kind": 164
                },
                {
                    "name": "ASSET_TYPE_THEME",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                    "description": "",
                    "kind": 164
                },
                {
                    "name": "AssetType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ASSET_TYPE_IMAGE | ASSET_TYPE_THEME | ASSET_TYPE_ATTACHMENT | ASSET_TYPE_STRUCTURED",
                    "file": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/lib/src/admin/models/device-size.interface.ts": [
                {
                    "name": "DeviceSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"phone\" | \"tablet\" | \"desktop\"",
                    "file": "projects/lib/src/admin/models/device-size.interface.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "projects/lib/src/admin/admin.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "declarations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AssetListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ASSET_TYPE_ATTACHMENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ASSET_TYPE_IMAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ASSET_TYPE_STRUCTURED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/asset-list/asset-list.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ASSET_TYPE_THEME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/asset-picker/asset-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AssetPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/asset-search/asset-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AssetSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/asset-update/asset-update.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AssetUpdateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/asset-upload/asset-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AssetUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/carousel-editor/carousel-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarouselEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/confirm-modal/confirm-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/directives/drag-and-drop/drag-and-drop.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DragAndDropDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/html-editor/html-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HtmlEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/page-editor/page-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/page-editor/page-editor.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMPTY_PAGE_CONTENT_DOC",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/page-preview-modal/page-preview-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PagePreviewModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/page-preview-renderer/page-preview-renderer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PagePreviewRendererComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/page-preview/page-preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PagePreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/page-summary/page-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageSummaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/section-date-settings/section-date-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionDateSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/section-picker/section-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/section-template-renderer/section-template-renderer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionTemplateRendererComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/components/status-icon/status-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/constants/page-schema.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PAGE_SCHEMA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/models/area.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Area",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/models/carousel-slide.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CarouselSlide",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/models/content-doc.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContentDoc",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/models/device-dimensions.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeviceDimensions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/admin/models/page-content-doc.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PageContentDoc",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/buyer/buyer.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "declarations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/buyer/components/page-renderer/page-renderer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageRendererComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/shared/components/no-results/no-results.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoResultsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/shared/constants/widget.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OC_TINYMCE_COL_WIDGET_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/shared/constants/widget.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OC_TINYMCE_END_DATE_ATTRIBUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/shared/constants/widget.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OC_TINYMCE_PRODUCT_WIDGET_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/shared/constants/widget.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OC_TINYMCE_ROW_WIDGET_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/shared/constants/widget.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OC_TINYMCE_SECTION_WIDGET_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/shared/constants/widget.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OC_TINYMCE_START_DATE_ATTRIBUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/shared/constants/widget.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OC_TINYMCE_WIDGET_ATTRIBUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lib/src/shared/pipes/safe-html.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafeHtmlPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/lib/src/shared/services/widget.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WidgetService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            }
        ]
    }
}